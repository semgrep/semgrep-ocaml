(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_ocaml"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
  "line_number_directive";
  "attribute_";
]

let children_regexps : (string * Run.exp option) list = [
  "match_operator", None;
  "and_operator_",
  Some (
    Alt [|
      Token (Literal "&");
      Token (Literal "&&");
    |];
  );
  "or_operator",
  Some (
    Alt [|
      Token (Literal "or");
      Token (Literal "||");
    |];
  );
  "hash_operator", None;
  "pat_60fc52b", None;
  "tok_choice_pat_4349e4b", None;
  "pretty_printing_indication", None;
  "add_operator", None;
  "prefix_operator", None;
  "pat_6cdf4be", None;
  "and_operator", None;
  "conversion_specification", None;
  "imm_tok_lbrackatat", None;
  "pat_3d340f6", None;
  "rel_operator", None;
  "tok_starstar_rep_pat_2ed1ddf", None;
  "unit",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Token (Literal ")");
      ];
      Seq [
        Token (Literal "begin");
        Token (Literal "end");
      ];
    |];
  );
  "boolean",
  Some (
    Alt [|
      Token (Literal "true");
      Token (Literal "false");
    |];
  );
  "concat_operator", None;
  "identifier", None;
  "indexing_operator", None;
  "pat_3bf11d1", None;
  "number", None;
  "null", None;
  "imm_tok_lf", None;
  "ocamlyacc_value", None;
  "shebang", None;
  "refutation_case", None;
  "imm_tok_ht", None;
  "pat_d43393f", None;
  "pat_714c625", None;
  "pat_19aaf34", None;
  "let_operator", None;
  "pat_9465c8b", None;
  "assign_operator",
  Some (
    Alt [|
      Token (Literal ":=");
    |];
  );
  "tok_pat_9ed5fa7_rep_pat_2ed1ddf", None;
  "pat_86b875b", None;
  "imm_tok_colon", None;
  "imm_tok_lbrackatatat", None;
  "capitalized_identifier", None;
  "left_quoted_string_delimiter", None;
  "imm_tok_space", None;
  "pat_21333c0", None;
  "sign_operator",
  Some (
    Alt [|
      Token (Literal "+");
      Token (Literal "-");
      Token (Literal "+.");
      Token (Literal "-.");
    |];
  );
  "imm_tok_lbrackat", None;
  "right_quoted_string_delimiter", None;
  "signed_number",
  Some (
    Seq [
      Alt [|
        Token (Literal "+");
        Token (Literal "-");
      |];
      Token (Name "tok_choice_pat_4349e4b");
    ];
  );
  "pow_operator",
  Some (
    Alt [|
      Token (Name "tok_starstar_rep_pat_2ed1ddf");
      Token (Literal "lsl");
      Token (Literal "lsr");
      Token (Literal "asr");
    |];
  );
  "label",
  Some (
    Seq [
      Alt [|
        Token (Literal "~");
        Token (Literal "?");
      |];
      Token (Name "identifier");
    ];
  );
  "abstract_type",
  Some (
    Seq [
      Token (Literal "type");
      Repeat1 (
        Token (Name "identifier");
      );
    ];
  );
  "mult_operator",
  Some (
    Alt [|
      Token (Name "tok_pat_9ed5fa7_rep_pat_2ed1ddf");
      Token (Literal "mod");
      Token (Literal "land");
      Token (Literal "lor");
      Token (Literal "lxor");
    |];
  );
  "type_variable",
  Some (
    Seq [
      Token (Literal "'");
      Alt [|
        Token (Name "identifier");
        Token (Name "capitalized_identifier");
      |];
    ];
  );
  "directive",
  Some (
    Seq [
      Token (Literal "#");
      Alt [|
        Token (Name "identifier");
        Token (Name "capitalized_identifier");
      |];
    ];
  );
  "attribute_id",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "capitalized_identifier");
      |];
      Repeat (
        Seq [
          Token (Literal ".");
          Alt [|
            Token (Name "identifier");
            Token (Name "capitalized_identifier");
          |];
        ];
      );
    ];
  );
  "extended_module_path",
  Some (
    Alt [|
      Alt [|
        Token (Name "capitalized_identifier");
        Seq [
          Token (Name "extended_module_path");
          Token (Literal ".");
          Token (Name "capitalized_identifier");
        ];
      |];
      Seq [
        Token (Name "extended_module_path");
        Token (Literal "(");
        Token (Name "extended_module_path");
        Token (Literal ")");
      ];
    |];
  );
  "module_path",
  Some (
    Alt [|
      Token (Name "capitalized_identifier");
      Seq [
        Token (Name "module_path");
        Token (Literal ".");
        Token (Name "capitalized_identifier");
      ];
    |];
  );
  "tag",
  Some (
    Seq [
      Token (Literal "`");
      Alt [|
        Token (Name "identifier");
        Token (Name "capitalized_identifier");
      |];
    ];
  );
  "escape_sequence",
  Some (
    Alt [|
      Token (Name "pat_60fc52b");
      Token (Name "pat_86b875b");
      Token (Name "pat_3bf11d1");
      Token (Name "pat_21333c0");
    |];
  );
  "quoted_string_content",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "imm_tok_space");
        Token (Name "imm_tok_lf");
        Token (Name "imm_tok_ht");
        Token (Name "imm_tok_lbrackat");
        Token (Name "imm_tok_lbrackatat");
        Token (Name "imm_tok_lbrackatatat");
        Token (Name "pat_714c625");
        Token (Name "null");
        Token (Name "conversion_specification");
        Token (Name "pretty_printing_indication");
      |];
    );
  );
  "parenthesized_abstract_type",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "abstract_type");
      Token (Literal ")");
    ];
  );
  "infix_operator",
  Some (
    Alt [|
      Token (Name "hash_operator");
      Token (Name "pow_operator");
      Token (Name "mult_operator");
      Token (Name "add_operator");
      Token (Name "concat_operator");
      Token (Name "rel_operator");
      Token (Name "and_operator_");
      Token (Name "or_operator");
      Token (Name "assign_operator");
    |];
  );
  "type_param",
  Some (
    Seq [
      Opt (
        Alt [|
          Seq [
            Token (Literal "+");
            Opt (
              Token (Literal "!");
            );
          ];
          Seq [
            Token (Literal "-");
            Opt (
              Token (Literal "!");
            );
          ];
          Seq [
            Token (Literal "!");
            Opt (
              Alt [|
                Token (Literal "+");
                Token (Literal "-");
              |];
            );
          ];
        |];
      );
      Alt [|
        Token (Name "type_variable");
        Token (Literal "_");
      |];
    ];
  );
  "attribute",
  Some (
    Seq [
      Token (Literal "%");
      Token (Name "attribute_id");
    ];
  );
  "module_type_path",
  Some (
    Alt [|
      Alt [|
        Token (Name "capitalized_identifier");
        Token (Name "identifier");
      |];
      Seq [
        Token (Name "extended_module_path");
        Token (Literal ".");
        Alt [|
          Token (Name "capitalized_identifier");
          Token (Name "identifier");
        |];
      ];
    |];
  );
  "type_constructor_path",
  Some (
    Alt [|
      Token (Name "identifier");
      Seq [
        Token (Name "extended_module_path");
        Token (Literal ".");
        Token (Name "identifier");
      ];
    |];
  );
  "class_type_path",
  Some (
    Alt [|
      Token (Name "identifier");
      Seq [
        Token (Name "extended_module_path");
        Token (Literal ".");
        Token (Name "identifier");
      ];
    |];
  );
  "field_path",
  Some (
    Alt [|
      Token (Name "identifier");
      Seq [
        Token (Name "module_path");
        Token (Literal ".");
        Token (Name "identifier");
      ];
    |];
  );
  "class_path",
  Some (
    Alt [|
      Token (Name "identifier");
      Seq [
        Token (Name "module_path");
        Token (Literal ".");
        Token (Name "identifier");
      ];
    |];
  );
  "constructor_path",
  Some (
    Alt [|
      Alt [|
        Token (Name "capitalized_identifier");
        Seq [
          Token (Literal "(");
          Token (Literal "::");
          Token (Literal ")");
        ];
      |];
      Seq [
        Token (Name "module_path");
        Token (Literal ".");
        Alt [|
          Token (Name "capitalized_identifier");
          Seq [
            Token (Literal "(");
            Token (Literal "::");
            Token (Literal ")");
          ];
        |];
      ];
    |];
  );
  "constrain_module",
  Some (
    Seq [
      Token (Literal "module");
      Token (Name "module_path");
      Alt [|
        Token (Literal "=");
        Token (Literal ":=");
      |];
      Token (Name "extended_module_path");
    ];
  );
  "indexing_operator_path",
  Some (
    Alt [|
      Token (Name "indexing_operator");
      Seq [
        Token (Name "module_path");
        Token (Literal ".");
        Token (Name "indexing_operator");
      ];
    |];
  );
  "character_content",
  Some (
    Alt [|
      Token (Name "pat_d43393f");
      Token (Name "null");
      Token (Name "escape_sequence");
    |];
  );
  "string_content",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "imm_tok_space");
        Token (Name "imm_tok_lf");
        Token (Name "imm_tok_ht");
        Token (Name "imm_tok_lbrackat");
        Token (Name "imm_tok_lbrackatat");
        Token (Name "imm_tok_lbrackatatat");
        Token (Name "pat_19aaf34");
        Token (Name "null");
        Token (Name "escape_sequence");
        Token (Name "pat_6cdf4be");
        Token (Name "pat_9465c8b");
        Token (Name "conversion_specification");
        Token (Name "pretty_printing_indication");
      |];
    );
  );
  "quoted_string",
  Some (
    Seq [
      Token (Literal "{");
      Token (Name "left_quoted_string_delimiter");
      Opt (
        Token (Name "quoted_string_content");
      );
      Token (Name "right_quoted_string_delimiter");
      Token (Literal "}");
    ];
  );
  "quoted_extension",
  Some (
    Seq [
      Token (Literal "{%");
      Token (Name "attribute_id");
      Opt (
        Token (Name "pat_3d340f6");
      );
      Token (Name "left_quoted_string_delimiter");
      Opt (
        Token (Name "quoted_string_content");
      );
      Token (Name "right_quoted_string_delimiter");
      Token (Literal "}");
    ];
  );
  "parenthesized_operator",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "prefix_operator");
        Token (Name "sign_operator");
        Token (Name "infix_operator");
        Seq [
          Token (Literal ".");
          Token (Name "indexing_operator");
          Alt [|
            Seq [
              Token (Literal "(");
              Opt (
                Seq [
                  Token (Literal ";");
                  Token (Literal "..");
                ];
              );
              Token (Literal ")");
            ];
            Seq [
              Token (Literal "[");
              Opt (
                Seq [
                  Token (Literal ";");
                  Token (Literal "..");
                ];
              );
              Token (Literal "]");
            ];
            Seq [
              Token (Literal "{");
              Opt (
                Seq [
                  Token (Literal ";");
                  Token (Literal "..");
                ];
              );
              Token (Literal "}");
            ];
          |];
          Opt (
            Token (Literal "<-");
          );
        ];
        Token (Name "let_operator");
        Token (Name "and_operator");
        Token (Name "match_operator");
      |];
      Token (Literal ")");
    ];
  );
  "type_params",
  Some (
    Alt [|
      Token (Name "type_param");
      Seq [
        Token (Literal "(");
        Token (Name "type_param");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "type_param");
          ];
        );
        Token (Literal ")");
      ];
    |];
  );
  "polymorphic_variant_pattern",
  Some (
    Seq [
      Token (Literal "#");
      Token (Name "type_constructor_path");
    ];
  );
  "new_expression",
  Some (
    Seq [
      Token (Literal "new");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "class_path");
    ];
  );
  "character",
  Some (
    Seq [
      Token (Literal "'");
      Token (Name "character_content");
      Token (Literal "'");
    ];
  );
  "string",
  Some (
    Seq [
      Token (Literal "\"");
      Opt (
        Token (Name "string_content");
      );
      Token (Literal "\"");
    ];
  );
  "value_pattern",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "parenthesized_operator");
    |];
  );
  "value_name",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "parenthesized_operator");
    |];
  );
  "constant",
  Some (
    Alt [|
      Token (Name "number");
      Token (Name "character");
      Token (Name "string");
      Token (Name "quoted_string");
      Token (Name "boolean");
      Token (Name "unit");
    |];
  );
  "value_path",
  Some (
    Alt [|
      Token (Name "value_name");
      Seq [
        Token (Name "module_path");
        Token (Literal ".");
        Token (Name "value_name");
      ];
    |];
  );
  "signed_constant",
  Some (
    Alt [|
      Token (Name "constant");
      Token (Name "signed_number");
    |];
  );
  "toplevel_directive",
  Some (
    Seq [
      Token (Name "directive");
      Opt (
        Alt [|
          Token (Name "constant");
          Token (Name "value_path");
          Token (Name "module_path");
        |];
      );
    ];
  );
  "range_pattern",
  Some (
    Seq [
      Token (Name "signed_constant");
      Token (Literal "..");
      Token (Name "signed_constant");
    ];
  );
  "alias_binding_pattern",
  Some (
    Seq [
      Token (Name "binding_pattern_ext");
      Token (Literal "as");
      Token (Name "value_name");
    ];
  );
  "alias_pattern",
  Some (
    Seq [
      Token (Name "pattern_ext");
      Token (Literal "as");
      Token (Name "value_pattern");
    ];
  );
  "aliased_type",
  Some (
    Seq [
      Token (Name "type_ext");
      Token (Literal "as");
      Token (Name "type_variable");
    ];
  );
  "application_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
      Repeat1 (
        Token (Name "argument");
      );
    ];
  );
  "argument",
  Some (
    Alt [|
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
      Token (Name "labeled_argument");
    |];
  );
  "array_binding_pattern",
  Some (
    Seq [
      Token (Literal "[|");
      Opt (
        Seq [
          Token (Name "binding_pattern_ext");
          Repeat (
            Seq [
              Token (Literal ";");
              Token (Name "binding_pattern_ext");
            ];
          );
          Opt (
            Token (Literal ";");
          );
        ];
      );
      Token (Literal "|]");
    ];
  );
  "array_expression",
  Some (
    Seq [
      Token (Literal "[|");
      Opt (
        Seq [
          Alt [|
            Token (Name "expression");
            Token (Name "extension");
          |];
          Repeat (
            Seq [
              Token (Literal ";");
              Alt [|
                Token (Name "expression");
                Token (Name "extension");
              |];
            ];
          );
          Opt (
            Token (Literal ";");
          );
        ];
      );
      Token (Literal "|]");
    ];
  );
  "array_get_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
      Token (Literal ".");
      Opt (
        Token (Name "indexing_operator_path");
      );
      Token (Literal "(");
      Token (Name "sequence_expression_ext");
      Token (Literal ")");
    ];
  );
  "array_pattern",
  Some (
    Seq [
      Token (Literal "[|");
      Opt (
        Seq [
          Token (Name "pattern_ext");
          Repeat (
            Seq [
              Token (Literal ";");
              Token (Name "pattern_ext");
            ];
          );
          Opt (
            Token (Literal ";");
          );
        ];
      );
      Token (Literal "|]");
    ];
  );
  "assert_expression",
  Some (
    Seq [
      Token (Literal "assert");
      Opt (
        Token (Name "attribute");
      );
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
    ];
  );
  "attribute_payload",
  Some (
    Alt [|
      Token (Name "structure");
      Seq [
        Token (Literal ":");
        Alt [|
          Token (Name "type_ext");
          Token (Name "signature");
        |];
      ];
      Seq [
        Token (Literal "?");
        Token (Name "pattern_ext");
        Opt (
          Token (Name "guard");
        );
      ];
    |];
  );
  "bigarray_get_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
      Token (Literal ".");
      Opt (
        Token (Name "indexing_operator_path");
      );
      Token (Literal "{");
      Token (Name "sequence_expression_ext");
      Token (Literal "}");
    ];
  );
  "binding_pattern",
  Some (
    Alt [|
      Token (Name "value_name");
      Token (Name "signed_constant");
      Token (Name "typed_binding_pattern");
      Token (Name "constructor_path");
      Token (Name "tag");
      Token (Name "polymorphic_variant_pattern");
      Token (Name "record_binding_pattern");
      Token (Name "list_binding_pattern");
      Token (Name "array_binding_pattern");
      Token (Name "local_open_binding_pattern");
      Token (Name "package_pattern");
      Token (Name "parenthesized_binding_pattern");
      Token (Name "alias_binding_pattern");
      Token (Name "or_binding_pattern");
      Token (Name "constructor_binding_pattern");
      Token (Name "tag_binding_pattern");
      Token (Name "tuple_binding_pattern");
      Token (Name "cons_binding_pattern");
      Token (Name "range_pattern");
      Token (Name "lazy_binding_pattern");
    |];
  );
  "binding_pattern_ext",
  Some (
    Alt [|
      Token (Name "binding_pattern");
      Token (Name "extension");
    |];
  );
  "class_application",
  Some (
    Seq [
      Token (Name "simple_class_expression");
      Repeat1 (
        Token (Name "argument");
      );
    ];
  );
  "class_binding",
  Some (
    Seq [
      Opt (
        Token (Literal "virtual");
      );
      Opt (
        Seq [
          Token (Literal "[");
          Token (Name "type_param");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "type_param");
            ];
          );
          Token (Literal "]");
        ];
      );
      Token (Name "identifier");
      Repeat (
        Token (Name "parameter");
      );
      Opt (
        Token (Name "class_typed");
      );
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "class_expression_ext");
        ];
      );
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "class_body_type",
  Some (
    Seq [
      Token (Literal "object");
      Opt (
        Seq [
          Token (Literal "(");
          Token (Name "type_ext");
          Token (Literal ")");
        ];
      );
      Repeat (
        Alt [|
          Token (Name "class_field_specification_ext");
          Token (Name "floating_attribute");
        |];
      );
      Token (Literal "end");
    ];
  );
  "class_definition",
  Some (
    Seq [
      Token (Literal "class");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "class_binding");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "class_binding");
        ];
      );
    ];
  );
  "class_expression",
  Some (
    Alt [|
      Token (Name "simple_class_expression");
      Token (Name "class_function");
      Token (Name "class_application");
      Token (Name "let_class_expression");
      Token (Name "let_open_class_expression");
    |];
  );
  "class_expression_ext",
  Some (
    Alt [|
      Token (Name "class_expression");
      Token (Name "extension");
    |];
  );
  "class_field",
  Some (
    Alt [|
      Token (Name "inheritance_definition");
      Token (Name "instance_variable_definition");
      Token (Name "method_definition");
      Token (Name "type_parameter_constraint");
      Token (Name "class_initializer");
    |];
  );
  "class_field_ext",
  Some (
    Alt [|
      Token (Name "class_field");
      Token (Name "item_extension");
    |];
  );
  "class_field_specification",
  Some (
    Alt [|
      Token (Name "inheritance_specification");
      Token (Name "instance_variable_specification");
      Token (Name "method_specification");
      Token (Name "type_parameter_constraint");
    |];
  );
  "class_field_specification_ext",
  Some (
    Alt [|
      Token (Name "class_field_specification");
      Token (Name "item_extension");
    |];
  );
  "class_function",
  Some (
    Seq [
      Token (Literal "fun");
      Repeat1 (
        Token (Name "parameter");
      );
      Token (Literal "->");
      Token (Name "class_expression_ext");
    ];
  );
  "class_function_type",
  Some (
    Seq [
      Opt (
        Seq [
          Opt (
            Token (Literal "?");
          );
          Token (Name "identifier");
          Token (Literal ":");
        ];
      );
      Token (Name "tuple_type_ext");
      Token (Literal "->");
      Token (Name "class_type_ext");
    ];
  );
  "class_initializer",
  Some (
    Seq [
      Token (Literal "initializer");
      Token (Name "sequence_expression_ext");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "class_type",
  Some (
    Alt [|
      Token (Name "simple_class_type");
      Token (Name "class_function_type");
    |];
  );
  "class_type_binding",
  Some (
    Seq [
      Opt (
        Token (Literal "virtual");
      );
      Opt (
        Seq [
          Token (Literal "[");
          Token (Name "type_param");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "type_param");
            ];
          );
          Token (Literal "]");
        ];
      );
      Token (Name "identifier");
      Token (Literal "=");
      Token (Name "simple_class_type_ext");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "class_type_definition",
  Some (
    Seq [
      Token (Literal "class");
      Token (Literal "type");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "class_type_binding");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "class_type_binding");
        ];
      );
    ];
  );
  "class_type_ext",
  Some (
    Alt [|
      Token (Name "class_type");
      Token (Name "extension");
    |];
  );
  "class_typed",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "class_type_ext");
    ];
  );
  "coercion_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "sequence_expression_ext");
      Opt (
        Token (Name "typed");
      );
      Token (Literal ":>");
      Token (Name "type_ext");
      Token (Literal ")");
    ];
  );
  "cons_binding_pattern",
  Some (
    Seq [
      Token (Name "binding_pattern_ext");
      Token (Literal "::");
      Token (Name "binding_pattern_ext");
    ];
  );
  "cons_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Token (Name "extension");
      |];
      Token (Literal "::");
      Alt [|
        Token (Name "expression");
        Token (Name "extension");
      |];
    ];
  );
  "cons_pattern",
  Some (
    Seq [
      Token (Name "pattern_ext");
      Token (Literal "::");
      Token (Name "pattern_ext");
    ];
  );
  "constrain_module_type",
  Some (
    Seq [
      Token (Literal "module");
      Token (Literal "type");
      Token (Name "module_type_path");
      Alt [|
        Token (Literal "=");
        Token (Literal ":=");
      |];
      Alt [|
        Token (Name "module_type");
        Token (Name "extension");
      |];
    ];
  );
  "constrain_type",
  Some (
    Seq [
      Token (Literal "type");
      Opt (
        Token (Name "type_params");
      );
      Token (Name "type_constructor_path");
      Token (Name "type_equation");
      Repeat (
        Token (Name "type_constraint");
      );
    ];
  );
  "constructed_type",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "simple_type");
          Token (Name "extension");
        |];
        Seq [
          Token (Literal "(");
          Token (Name "type_ext");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "type_ext");
            ];
          );
          Token (Literal ")");
        ];
      |];
      Token (Name "type_constructor_path");
    ];
  );
  "constructor_argument",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "simple_type");
          Token (Name "extension");
        |];
        Repeat (
          Seq [
            Token (Literal "*");
            Alt [|
              Token (Name "simple_type");
              Token (Name "extension");
            |];
          ];
        );
      ];
      Token (Name "record_declaration");
    |];
  );
  "constructor_binding_pattern",
  Some (
    Seq [
      Token (Name "constructor_path");
      Token (Name "binding_pattern_ext");
    ];
  );
  "constructor_declaration",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "capitalized_identifier");
          Seq [
            Token (Literal "(");
            Token (Literal "::");
            Token (Literal ")");
          ];
        |];
        Alt [|
          Seq [
            Token (Literal "[");
            Token (Literal "]");
          ];
          Seq [
            Token (Literal "(");
            Token (Literal ")");
          ];
          Token (Literal "true");
          Token (Literal "false");
        |];
      |];
      Opt (
        Alt [|
          Seq [
            Token (Literal "of");
            Token (Name "constructor_argument");
          ];
          Token (Name "simple_typed");
          Seq [
            Token (Literal ":");
            Token (Name "constructor_argument");
            Token (Literal "->");
            Alt [|
              Token (Name "simple_type");
              Token (Name "extension");
            |];
          ];
          Seq [
            Token (Literal "=");
            Token (Name "constructor_path");
          ];
        |];
      );
    ];
  );
  "constructor_pattern",
  Some (
    Seq [
      Token (Name "constructor_path");
      Opt (
        Token (Name "parenthesized_abstract_type");
      );
      Token (Name "pattern_ext");
    ];
  );
  "do_clause",
  Some (
    Seq [
      Token (Literal "do");
      Opt (
        Token (Name "sequence_expression_ext");
      );
      Token (Literal "done");
    ];
  );
  "else_clause",
  Some (
    Seq [
      Token (Literal "else");
      Alt [|
        Token (Name "expression");
        Token (Name "extension");
      |];
    ];
  );
  "exception_definition",
  Some (
    Seq [
      Token (Literal "exception");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "constructor_declaration");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "exception_pattern",
  Some (
    Seq [
      Token (Literal "exception");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "pattern_ext");
    ];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "simple_expression");
      Token (Name "product_expression");
      Token (Name "cons_expression");
      Token (Name "application_expression");
      Token (Name "infix_expression");
      Token (Name "sign_expression");
      Token (Name "set_expression");
      Token (Name "if_expression");
      Token (Name "while_expression");
      Token (Name "for_expression");
      Token (Name "match_expression");
      Token (Name "function_expression");
      Token (Name "fun_expression");
      Token (Name "try_expression");
      Token (Name "let_expression");
      Token (Name "assert_expression");
      Token (Name "lazy_expression");
      Token (Name "let_module_expression");
      Token (Name "let_open_expression");
      Token (Name "let_exception_expression");
      Token (Name "object_expression");
    |];
  );
  "expression_item",
  Some (
    Seq [
      Token (Name "sequence_expression_ext");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "extension",
  Some (
    Alt [|
      Token (Name "extension_");
      Token (Name "quoted_extension");
    |];
  );
  "extension_",
  Some (
    Seq [
      Token (Literal "[%");
      Token (Name "attribute_id");
      Opt (
        Token (Name "attribute_payload");
      );
      Token (Literal "]");
    ];
  );
  "external",
  Some (
    Seq [
      Token (Literal "external");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "value_name");
      Token (Name "typed");
      Token (Literal "=");
      Repeat1 (
        Token (Name "string");
      );
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "field_binding_pattern",
  Some (
    Seq [
      Token (Name "field_path");
      Opt (
        Token (Name "typed");
      );
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "binding_pattern_ext");
        ];
      );
    ];
  );
  "field_declaration",
  Some (
    Seq [
      Opt (
        Token (Literal "mutable");
      );
      Token (Name "identifier");
      Token (Name "polymorphic_typed");
    ];
  );
  "field_expression",
  Some (
    Seq [
      Token (Name "field_path");
      Opt (
        Token (Name "typed");
      );
      Opt (
        Seq [
          Token (Literal "=");
          Alt [|
            Token (Name "expression");
            Token (Name "extension");
          |];
        ];
      );
    ];
  );
  "field_get_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
      Token (Literal ".");
      Token (Name "field_path");
    ];
  );
  "field_pattern",
  Some (
    Seq [
      Token (Name "field_path");
      Opt (
        Token (Name "typed");
      );
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "pattern_ext");
        ];
      );
    ];
  );
  "floating_attribute",
  Some (
    Seq [
      Token (Literal "[@@@");
      Token (Name "attribute_id");
      Opt (
        Token (Name "attribute_payload");
      );
      Token (Literal "]");
    ];
  );
  "for_expression",
  Some (
    Seq [
      Token (Literal "for");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "value_pattern");
      Token (Literal "=");
      Token (Name "sequence_expression_ext");
      Alt [|
        Token (Literal "to");
        Token (Literal "downto");
      |];
      Token (Name "sequence_expression_ext");
      Token (Name "do_clause");
    ];
  );
  "fun_expression",
  Some (
    Seq [
      Token (Literal "fun");
      Opt (
        Token (Name "attribute");
      );
      Repeat1 (
        Token (Name "parameter");
      );
      Opt (
        Token (Name "simple_typed");
      );
      Token (Literal "->");
      Token (Name "sequence_expression_ext");
    ];
  );
  "function_expression",
  Some (
    Seq [
      Token (Literal "function");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "match_cases");
    ];
  );
  "function_type",
  Some (
    Seq [
      Alt [|
        Token (Name "typed_label");
        Token (Name "type_ext");
      |];
      Token (Literal "->");
      Token (Name "type_ext");
    ];
  );
  "functor",
  Some (
    Seq [
      Token (Literal "functor");
      Repeat1 (
        Token (Name "module_parameter");
      );
      Token (Literal "->");
      Alt [|
        Token (Name "module_expression");
        Token (Name "extension");
      |];
    ];
  );
  "functor_type",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Literal "functor");
          Repeat (
            Token (Name "module_parameter");
          );
        ];
        Alt [|
          Token (Name "module_type");
          Token (Name "extension");
        |];
      |];
      Token (Literal "->");
      Alt [|
        Token (Name "module_type");
        Token (Name "extension");
      |];
    ];
  );
  "guard",
  Some (
    Seq [
      Token (Literal "when");
      Token (Name "sequence_expression_ext");
    ];
  );
  "hash_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
      Token (Name "hash_operator");
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
    ];
  );
  "hash_type",
  Some (
    Seq [
      Opt (
        Alt [|
          Alt [|
            Token (Name "simple_type");
            Token (Name "extension");
          |];
          Seq [
            Token (Literal "(");
            Token (Name "type_ext");
            Repeat (
              Seq [
                Token (Literal ",");
                Token (Name "type_ext");
              ];
            );
            Token (Literal ")");
          ];
        |];
      );
      Token (Literal "#");
      Token (Name "class_type_path");
    ];
  );
  "if_expression",
  Some (
    Seq [
      Token (Literal "if");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "sequence_expression_ext");
      Token (Name "then_clause");
      Opt (
        Token (Name "else_clause");
      );
    ];
  );
  "include_module",
  Some (
    Seq [
      Token (Literal "include");
      Opt (
        Token (Name "attribute");
      );
      Alt [|
        Token (Name "module_expression");
        Token (Name "extension");
      |];
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "include_module_type",
  Some (
    Seq [
      Token (Literal "include");
      Opt (
        Token (Name "attribute");
      );
      Alt [|
        Token (Name "module_type");
        Token (Name "extension");
      |];
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "infix_expression",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
        Token (Name "pow_operator");
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
        Token (Name "mult_operator");
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
        Token (Name "add_operator");
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
        Token (Name "concat_operator");
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
        Token (Name "rel_operator");
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
        Token (Name "and_operator_");
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
        Token (Name "or_operator");
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
      ];
      Seq [
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
        Token (Name "assign_operator");
        Alt [|
          Token (Name "expression");
          Token (Name "extension");
        |];
      ];
    |];
  );
  "inheritance_definition",
  Some (
    Seq [
      Token (Literal "inherit");
      Opt (
        Token (Literal "!");
      );
      Token (Name "class_expression_ext");
      Opt (
        Seq [
          Token (Literal "as");
          Token (Name "value_pattern");
        ];
      );
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "inheritance_specification",
  Some (
    Seq [
      Token (Literal "inherit");
      Token (Name "simple_class_type_ext");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "instance_variable_definition",
  Some (
    Seq [
      Token (Literal "val");
      Opt (
        Token (Literal "!");
      );
      Repeat (
        Alt [|
          Token (Literal "mutable");
          Token (Literal "virtual");
        |];
      );
      Token (Name "identifier");
      Opt (
        Token (Name "typed");
      );
      Opt (
        Seq [
          Token (Literal ":>");
          Token (Name "type_ext");
        ];
      );
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "sequence_expression_ext");
        ];
      );
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "instance_variable_expression",
  Some (
    Seq [
      Token (Name "identifier");
      Opt (
        Seq [
          Token (Literal "=");
          Alt [|
            Token (Name "expression");
            Token (Name "extension");
          |];
        ];
      );
    ];
  );
  "instance_variable_specification",
  Some (
    Seq [
      Token (Literal "val");
      Repeat (
        Alt [|
          Token (Literal "mutable");
          Token (Literal "virtual");
        |];
      );
      Token (Name "identifier");
      Token (Name "typed");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "instantiated_class",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "type_ext");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_ext");
        ];
      );
      Token (Literal "]");
      Token (Name "class_path");
    ];
  );
  "instantiated_class_type",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "type_ext");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "type_ext");
        ];
      );
      Token (Literal "]");
      Token (Name "class_type_path");
    ];
  );
  "item_attribute",
  Some (
    Seq [
      Token (Literal "[@@");
      Token (Name "attribute_id");
      Opt (
        Token (Name "attribute_payload");
      );
      Token (Literal "]");
    ];
  );
  "item_extension",
  Some (
    Alt [|
      Token (Name "item_extension_");
      Token (Name "quoted_item_extension");
    |];
  );
  "item_extension_",
  Some (
    Seq [
      Token (Literal "[%%");
      Token (Name "attribute_id");
      Opt (
        Token (Name "attribute_payload");
      );
      Token (Literal "]");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "labeled_argument",
  Some (
    Alt [|
      Token (Name "label");
      Seq [
        Token (Name "label");
        Token (Name "imm_tok_colon");
        Alt [|
          Token (Name "simple_expression");
          Token (Name "extension");
        |];
      ];
    |];
  );
  "lazy_binding_pattern",
  Some (
    Seq [
      Token (Literal "lazy");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "binding_pattern_ext");
    ];
  );
  "lazy_expression",
  Some (
    Seq [
      Token (Literal "lazy");
      Opt (
        Token (Name "attribute");
      );
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
    ];
  );
  "lazy_pattern",
  Some (
    Seq [
      Token (Literal "lazy");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "pattern_ext");
    ];
  );
  "let_binding",
  Some (
    Seq [
      Token (Name "binding_pattern_ext");
      Opt (
        Seq [
          Repeat (
            Token (Name "parameter");
          );
          Opt (
            Token (Name "polymorphic_typed");
          );
          Opt (
            Seq [
              Token (Literal ":>");
              Token (Name "type_ext");
            ];
          );
          Token (Literal "=");
          Token (Name "sequence_expression_ext");
        ];
      );
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "let_class_expression",
  Some (
    Seq [
      Token (Name "value_definition");
      Token (Literal "in");
      Token (Name "class_expression_ext");
    ];
  );
  "let_exception_expression",
  Some (
    Seq [
      Token (Literal "let");
      Token (Name "exception_definition");
      Token (Literal "in");
      Token (Name "sequence_expression_ext");
    ];
  );
  "let_expression",
  Some (
    Seq [
      Token (Name "value_definition");
      Token (Literal "in");
      Token (Name "sequence_expression_ext");
    ];
  );
  "let_module_expression",
  Some (
    Seq [
      Token (Literal "let");
      Token (Name "module_definition");
      Token (Literal "in");
      Token (Name "sequence_expression_ext");
    ];
  );
  "let_open_class_expression",
  Some (
    Seq [
      Token (Literal "let");
      Token (Name "open_module");
      Token (Literal "in");
      Token (Name "class_expression_ext");
    ];
  );
  "let_open_class_type",
  Some (
    Seq [
      Token (Literal "let");
      Token (Name "open_module");
      Token (Literal "in");
      Token (Name "simple_class_type_ext");
    ];
  );
  "let_open_expression",
  Some (
    Seq [
      Token (Literal "let");
      Token (Name "open_module");
      Token (Literal "in");
      Token (Name "sequence_expression_ext");
    ];
  );
  "list_binding_pattern",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Token (Name "binding_pattern_ext");
          Repeat (
            Seq [
              Token (Literal ";");
              Token (Name "binding_pattern_ext");
            ];
          );
          Opt (
            Token (Literal ";");
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "list_expression",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Alt [|
            Token (Name "expression");
            Token (Name "extension");
          |];
          Repeat (
            Seq [
              Token (Literal ";");
              Alt [|
                Token (Name "expression");
                Token (Name "extension");
              |];
            ];
          );
          Opt (
            Token (Literal ";");
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "list_pattern",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Token (Name "pattern_ext");
          Repeat (
            Seq [
              Token (Literal ";");
              Token (Name "pattern_ext");
            ];
          );
          Opt (
            Token (Literal ";");
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "local_open_binding_pattern",
  Some (
    Seq [
      Token (Name "module_path");
      Token (Literal ".");
      Alt [|
        Seq [
          Token (Literal "(");
          Opt (
            Token (Name "binding_pattern_ext");
          );
          Token (Literal ")");
        ];
        Token (Name "list_binding_pattern");
        Token (Name "array_binding_pattern");
        Token (Name "record_binding_pattern");
      |];
    ];
  );
  "local_open_expression",
  Some (
    Seq [
      Token (Name "module_path");
      Token (Literal ".");
      Alt [|
        Seq [
          Token (Literal "(");
          Opt (
            Token (Name "sequence_expression_ext");
          );
          Token (Literal ")");
        ];
        Token (Name "list_expression");
        Token (Name "array_expression");
        Token (Name "record_expression");
        Token (Name "object_copy_expression");
        Token (Name "package_expression");
      |];
    ];
  );
  "local_open_pattern",
  Some (
    Seq [
      Token (Name "module_path");
      Token (Literal ".");
      Alt [|
        Seq [
          Token (Literal "(");
          Opt (
            Token (Name "pattern_ext");
          );
          Token (Literal ")");
        ];
        Token (Name "list_pattern");
        Token (Name "array_pattern");
        Token (Name "record_pattern");
      |];
    ];
  );
  "match_case",
  Some (
    Seq [
      Token (Name "pattern_ext");
      Opt (
        Token (Name "guard");
      );
      Token (Literal "->");
      Alt [|
        Token (Name "sequence_expression_ext");
        Token (Name "refutation_case");
      |];
    ];
  );
  "match_cases",
  Some (
    Seq [
      Opt (
        Token (Literal "|");
      );
      Token (Name "match_case");
      Repeat (
        Seq [
          Token (Literal "|");
          Token (Name "match_case");
        ];
      );
    ];
  );
  "match_expression",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Literal "match");
          Opt (
            Token (Name "attribute");
          );
        ];
        Token (Name "match_operator");
      |];
      Token (Name "sequence_expression_ext");
      Token (Literal "with");
      Token (Name "match_cases");
    ];
  );
  "method_definition",
  Some (
    Seq [
      Token (Literal "method");
      Opt (
        Token (Literal "!");
      );
      Repeat (
        Alt [|
          Token (Literal "private");
          Token (Literal "virtual");
        |];
      );
      Token (Name "identifier");
      Repeat (
        Token (Name "parameter");
      );
      Opt (
        Token (Name "polymorphic_typed");
      );
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "sequence_expression_ext");
        ];
      );
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "method_invocation",
  Some (
    Seq [
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
      Token (Literal "#");
      Token (Name "identifier");
    ];
  );
  "method_specification",
  Some (
    Seq [
      Token (Literal "method");
      Repeat (
        Alt [|
          Token (Literal "private");
          Token (Literal "virtual");
        |];
      );
      Token (Name "identifier");
      Token (Name "polymorphic_typed");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "method_type",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Name "polymorphic_typed");
    ];
  );
  "module_application",
  Some (
    Seq [
      Alt [|
        Token (Name "module_expression");
        Token (Name "extension");
      |];
      Alt [|
        Token (Name "simple_module_expression_ext");
        Seq [
          Token (Literal "(");
          Token (Literal ")");
        ];
      |];
    ];
  );
  "module_binding",
  Some (
    Seq [
      Alt [|
        Token (Name "capitalized_identifier");
        Token (Literal "_");
      |];
      Repeat (
        Token (Name "module_parameter");
      );
      Opt (
        Token (Name "module_typed");
      );
      Opt (
        Seq [
          Token (Literal "=");
          Alt [|
            Token (Name "module_expression");
            Token (Name "extension");
          |];
        ];
      );
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "module_definition",
  Some (
    Seq [
      Token (Literal "module");
      Opt (
        Token (Name "attribute");
      );
      Opt (
        Token (Literal "rec");
      );
      Token (Name "module_binding");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "module_binding");
        ];
      );
    ];
  );
  "module_expression",
  Some (
    Alt [|
      Token (Name "simple_module_expression");
      Token (Name "module_path");
      Token (Name "structure_");
      Token (Name "functor");
      Token (Name "module_application");
    |];
  );
  "module_parameter",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "capitalized_identifier");
            Token (Literal "_");
          |];
          Token (Name "module_typed");
        ];
      );
      Token (Literal ")");
    ];
  );
  "module_type",
  Some (
    Alt [|
      Token (Name "module_type_path");
      Token (Name "signature_");
      Token (Name "module_type_constraint");
      Token (Name "module_type_of");
      Token (Name "functor_type");
      Token (Name "parenthesized_module_type");
    |];
  );
  "module_type_constraint",
  Some (
    Seq [
      Alt [|
        Token (Name "module_type");
        Token (Name "extension");
      |];
      Token (Literal "with");
      Alt [|
        Token (Name "constrain_type");
        Token (Name "constrain_module");
        Token (Name "constrain_module_type");
      |];
      Repeat (
        Seq [
          Token (Literal "and");
          Alt [|
            Token (Name "constrain_type");
            Token (Name "constrain_module");
            Token (Name "constrain_module_type");
          |];
        ];
      );
    ];
  );
  "module_type_definition",
  Some (
    Seq [
      Token (Literal "module");
      Token (Literal "type");
      Opt (
        Token (Name "attribute");
      );
      Alt [|
        Token (Name "capitalized_identifier");
        Token (Name "identifier");
      |];
      Opt (
        Seq [
          Alt [|
            Token (Literal "=");
            Token (Literal ":=");
          |];
          Alt [|
            Token (Name "module_type");
            Token (Name "extension");
          |];
        ];
      );
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "module_type_of",
  Some (
    Seq [
      Token (Literal "module");
      Token (Literal "type");
      Token (Literal "of");
      Alt [|
        Token (Name "module_expression");
        Token (Name "extension");
      |];
    ];
  );
  "module_typed",
  Some (
    Seq [
      Token (Literal ":");
      Alt [|
        Token (Name "module_type");
        Token (Name "extension");
      |];
    ];
  );
  "object_copy_expression",
  Some (
    Seq [
      Token (Literal "{<");
      Opt (
        Seq [
          Token (Name "instance_variable_expression");
          Repeat (
            Seq [
              Token (Literal ";");
              Token (Name "instance_variable_expression");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ";");
      );
      Token (Literal ">}");
    ];
  );
  "object_expression",
  Some (
    Seq [
      Token (Literal "object");
      Opt (
        Token (Name "attribute");
      );
      Opt (
        Seq [
          Token (Literal "(");
          Token (Name "pattern_ext");
          Opt (
            Token (Name "typed");
          );
          Token (Literal ")");
        ];
      );
      Repeat (
        Alt [|
          Token (Name "class_field_ext");
          Token (Name "floating_attribute");
        |];
      );
      Token (Literal "end");
    ];
  );
  "object_type",
  Some (
    Seq [
      Token (Literal "<");
      Opt (
        Alt [|
          Seq [
            Alt [|
              Token (Name "method_type");
              Alt [|
                Token (Name "simple_type");
                Token (Name "extension");
              |];
            |];
            Repeat (
              Seq [
                Token (Literal ";");
                Alt [|
                  Token (Name "method_type");
                  Alt [|
                    Token (Name "simple_type");
                    Token (Name "extension");
                  |];
                |];
              ];
            );
            Opt (
              Seq [
                Token (Literal ";");
                Opt (
                  Token (Literal "..");
                );
              ];
            );
          ];
          Token (Literal "..");
        |];
      );
      Token (Literal ">");
    ];
  );
  "open_module",
  Some (
    Seq [
      Token (Literal "open");
      Opt (
        Token (Literal "!");
      );
      Opt (
        Token (Name "attribute");
      );
      Alt [|
        Token (Name "module_expression");
        Token (Name "extension");
      |];
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "or_binding_pattern",
  Some (
    Seq [
      Token (Name "binding_pattern_ext");
      Token (Literal "|");
      Token (Name "binding_pattern_ext");
    ];
  );
  "or_pattern",
  Some (
    Seq [
      Token (Name "pattern_ext");
      Token (Literal "|");
      Token (Name "pattern_ext");
    ];
  );
  "package_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Literal "module");
      Opt (
        Token (Name "attribute");
      );
      Alt [|
        Token (Name "module_expression");
        Token (Name "extension");
      |];
      Opt (
        Token (Name "module_typed");
      );
      Token (Literal ")");
    ];
  );
  "package_pattern",
  Some (
    Seq [
      Token (Literal "(");
      Token (Literal "module");
      Opt (
        Token (Name "attribute");
      );
      Alt [|
        Token (Name "capitalized_identifier");
        Token (Literal "_");
      |];
      Opt (
        Token (Name "module_typed");
      );
      Token (Literal ")");
    ];
  );
  "package_type",
  Some (
    Seq [
      Token (Literal "(");
      Token (Literal "module");
      Opt (
        Token (Name "attribute");
      );
      Alt [|
        Token (Name "module_type");
        Token (Name "extension");
      |];
      Token (Literal ")");
    ];
  );
  "packed_module",
  Some (
    Seq [
      Token (Literal "(");
      Token (Literal "val");
      Alt [|
        Token (Name "expression");
        Token (Name "extension");
      |];
      Opt (
        Token (Name "module_typed");
      );
      Opt (
        Seq [
          Token (Literal ":>");
          Alt [|
            Token (Name "module_type");
            Token (Name "extension");
          |];
        ];
      );
      Token (Literal ")");
    ];
  );
  "parameter",
  Some (
    Alt [|
      Token (Name "parameter_");
      Token (Name "parenthesized_abstract_type");
    |];
  );
  "parameter_",
  Some (
    Alt [|
      Token (Name "simple_pattern_ext");
      Seq [
        Alt [|
          Token (Literal "~");
          Token (Literal "?");
        |];
        Token (Name "identifier");
      ];
      Seq [
        Token (Name "label");
        Token (Name "imm_tok_colon");
        Token (Name "simple_pattern_ext");
      ];
      Seq [
        Alt [|
          Token (Literal "~");
          Token (Literal "?");
        |];
        Token (Literal "(");
        Token (Name "identifier");
        Opt (
          Token (Name "typed");
        );
        Opt (
          Seq [
            Token (Literal "=");
            Token (Name "sequence_expression_ext");
          ];
        );
        Token (Literal ")");
      ];
      Seq [
        Token (Name "label");
        Token (Name "imm_tok_colon");
        Token (Literal "(");
        Token (Name "pattern_ext");
        Opt (
          Token (Name "typed");
        );
        Token (Literal "=");
        Token (Name "sequence_expression_ext");
        Token (Literal ")");
      ];
    |];
  );
  "parenthesized_binding_pattern",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "binding_pattern_ext");
      Token (Literal ")");
    ];
  );
  "parenthesized_class_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "class_expression_ext");
      Token (Literal ")");
    ];
  );
  "parenthesized_expression",
  Some (
    Alt [|
      Seq [
        Token (Literal "begin");
        Opt (
          Token (Name "attribute");
        );
        Token (Name "sequence_expression_ext");
        Token (Literal "end");
      ];
      Seq [
        Token (Literal "(");
        Token (Name "sequence_expression_ext");
        Token (Literal ")");
      ];
    |];
  );
  "parenthesized_module_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "module_expression");
        Token (Name "extension");
      |];
      Token (Literal ")");
    ];
  );
  "parenthesized_module_type",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "module_type");
        Token (Name "extension");
      |];
      Token (Literal ")");
    ];
  );
  "parenthesized_pattern",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "pattern_ext");
      Token (Literal ")");
    ];
  );
  "parenthesized_type",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "type_ext");
      Token (Literal ")");
    ];
  );
  "pattern",
  Some (
    Alt [|
      Token (Name "simple_pattern");
      Token (Name "alias_pattern");
      Token (Name "or_pattern");
      Token (Name "constructor_pattern");
      Token (Name "tag_pattern");
      Token (Name "tuple_pattern");
      Token (Name "cons_pattern");
      Token (Name "range_pattern");
      Token (Name "lazy_pattern");
      Token (Name "exception_pattern");
    |];
  );
  "pattern_ext",
  Some (
    Alt [|
      Token (Name "pattern");
      Token (Name "extension");
    |];
  );
  "polymorphic_type",
  Some (
    Alt [|
      Token (Name "polymorphic_type_");
      Token (Name "type_ext");
    |];
  );
  "polymorphic_type_",
  Some (
    Seq [
      Alt [|
        Repeat1 (
          Token (Name "type_variable");
        );
        Token (Name "abstract_type");
      |];
      Token (Literal ".");
      Token (Name "type_ext");
    ];
  );
  "polymorphic_typed",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "polymorphic_type");
    ];
  );
  "polymorphic_variant_type",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Literal "[");
          Token (Name "tag_specification");
          Token (Literal "]");
        ];
        Seq [
          Token (Literal "[");
          Opt (
            Token (Name "tag_spec");
          );
          Token (Literal "|");
          Token (Name "tag_spec");
          Repeat (
            Seq [
              Token (Literal "|");
              Token (Name "tag_spec");
            ];
          );
          Token (Literal "]");
        ];
        Seq [
          Token (Literal "[>");
          Opt (
            Token (Literal "|");
          );
          Opt (
            Seq [
              Token (Name "tag_spec");
              Repeat (
                Seq [
                  Token (Literal "|");
                  Token (Name "tag_spec");
                ];
              );
            ];
          );
          Token (Literal "]");
        ];
        Seq [
          Token (Literal "[<");
          Opt (
            Token (Literal "|");
          );
          Token (Name "tag_spec");
          Repeat (
            Seq [
              Token (Literal "|");
              Token (Name "tag_spec");
            ];
          );
          Opt (
            Seq [
              Token (Literal ">");
              Repeat1 (
                Token (Name "tag");
              );
            ];
          );
          Token (Literal "]");
        ];
      |];
    ];
  );
  "prefix_expression",
  Some (
    Seq [
      Token (Name "prefix_operator");
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
    ];
  );
  "product_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Token (Name "extension");
      |];
      Token (Literal ",");
      Alt [|
        Token (Name "expression");
        Token (Name "extension");
      |];
    ];
  );
  "quoted_item_extension",
  Some (
    Seq [
      Token (Literal "{%%");
      Token (Name "attribute_id");
      Opt (
        Token (Name "pat_3d340f6");
      );
      Token (Name "left_quoted_string_delimiter");
      Opt (
        Token (Name "quoted_string_content");
      );
      Token (Name "right_quoted_string_delimiter");
      Token (Literal "}");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "record_binding_pattern",
  Some (
    Seq [
      Token (Literal "{");
      Token (Name "field_binding_pattern");
      Repeat (
        Seq [
          Token (Literal ";");
          Token (Name "field_binding_pattern");
        ];
      );
      Opt (
        Seq [
          Token (Literal ";");
          Token (Literal "_");
        ];
      );
      Opt (
        Token (Literal ";");
      );
      Token (Literal "}");
    ];
  );
  "record_declaration",
  Some (
    Seq [
      Token (Literal "{");
      Token (Name "field_declaration");
      Repeat (
        Seq [
          Token (Literal ";");
          Token (Name "field_declaration");
        ];
      );
      Opt (
        Token (Literal ";");
      );
      Token (Literal "}");
    ];
  );
  "record_expression",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "simple_expression");
            Token (Name "extension");
          |];
          Token (Literal "with");
        ];
      );
      Token (Name "field_expression");
      Repeat (
        Seq [
          Token (Literal ";");
          Token (Name "field_expression");
        ];
      );
      Opt (
        Token (Literal ";");
      );
      Token (Literal "}");
    ];
  );
  "record_pattern",
  Some (
    Seq [
      Token (Literal "{");
      Token (Name "field_pattern");
      Repeat (
        Seq [
          Token (Literal ";");
          Token (Name "field_pattern");
        ];
      );
      Opt (
        Seq [
          Token (Literal ";");
          Token (Literal "_");
        ];
      );
      Opt (
        Token (Literal ";");
      );
      Token (Literal "}");
    ];
  );
  "sequence_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Token (Name "extension");
      |];
      Token (Literal ";");
      Opt (
        Seq [
          Opt (
            Token (Name "attribute");
          );
          Token (Name "sequence_expression_ext");
        ];
      );
    ];
  );
  "sequence_expression_",
  Some (
    Alt [|
      Token (Name "expression");
      Token (Name "sequence_expression");
    |];
  );
  "sequence_expression_ext",
  Some (
    Alt [|
      Token (Name "sequence_expression_");
      Token (Name "extension");
    |];
  );
  "set_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "field_get_expression");
        Token (Name "array_get_expression");
        Token (Name "string_get_expression");
        Token (Name "bigarray_get_expression");
        Token (Name "identifier");
      |];
      Token (Literal "<-");
      Alt [|
        Token (Name "expression");
        Token (Name "extension");
      |];
    ];
  );
  "sign_expression",
  Some (
    Seq [
      Token (Name "sign_operator");
      Alt [|
        Token (Name "expression");
        Token (Name "extension");
      |];
    ];
  );
  "signature",
  Some (
    Alt [|
      Repeat1 (
        Token (Literal ";;");
      );
      Seq [
        Repeat1 (
          Seq [
            Repeat (
              Token (Literal ";;");
            );
            Token (Name "signature_item_ext");
          ];
        );
        Repeat (
          Token (Literal ";;");
        );
      ];
    |];
  );
  "signature_",
  Some (
    Seq [
      Token (Literal "sig");
      Opt (
        Token (Name "signature");
      );
      Token (Literal "end");
    ];
  );
  "signature_item",
  Some (
    Alt [|
      Token (Name "value_specification");
      Token (Name "external");
      Token (Name "type_definition");
      Token (Name "exception_definition");
      Token (Name "module_definition");
      Token (Name "module_type_definition");
      Token (Name "open_module");
      Token (Name "include_module_type");
      Token (Name "class_definition");
      Token (Name "class_type_definition");
      Token (Name "floating_attribute");
    |];
  );
  "signature_item_ext",
  Some (
    Alt [|
      Token (Name "signature_item");
      Token (Name "item_extension");
    |];
  );
  "simple_class_expression",
  Some (
    Alt [|
      Token (Name "class_path");
      Token (Name "instantiated_class");
      Token (Name "object_expression");
      Token (Name "typed_class_expression");
      Token (Name "parenthesized_class_expression");
    |];
  );
  "simple_class_type",
  Some (
    Alt [|
      Token (Name "class_type_path");
      Token (Name "instantiated_class_type");
      Token (Name "class_body_type");
      Token (Name "let_open_class_type");
    |];
  );
  "simple_class_type_ext",
  Some (
    Alt [|
      Token (Name "simple_class_type");
      Token (Name "extension");
    |];
  );
  "simple_expression",
  Some (
    Alt [|
      Token (Name "value_path");
      Token (Name "constant");
      Token (Name "typed_expression");
      Token (Name "constructor_path");
      Token (Name "tag");
      Token (Name "list_expression");
      Token (Name "array_expression");
      Token (Name "record_expression");
      Token (Name "prefix_expression");
      Token (Name "hash_expression");
      Token (Name "field_get_expression");
      Token (Name "array_get_expression");
      Token (Name "string_get_expression");
      Token (Name "bigarray_get_expression");
      Token (Name "coercion_expression");
      Token (Name "local_open_expression");
      Token (Name "package_expression");
      Token (Name "new_expression");
      Token (Name "object_copy_expression");
      Token (Name "method_invocation");
      Token (Name "parenthesized_expression");
      Token (Name "ocamlyacc_value");
    |];
  );
  "simple_module_expression",
  Some (
    Alt [|
      Token (Name "typed_module_expression");
      Token (Name "parenthesized_module_expression");
      Token (Name "packed_module");
    |];
  );
  "simple_module_expression_ext",
  Some (
    Alt [|
      Token (Name "simple_module_expression");
      Token (Name "extension");
    |];
  );
  "simple_pattern",
  Some (
    Alt [|
      Token (Name "value_pattern");
      Token (Name "signed_constant");
      Token (Name "typed_pattern");
      Token (Name "constructor_path");
      Token (Name "tag");
      Token (Name "polymorphic_variant_pattern");
      Token (Name "record_pattern");
      Token (Name "list_pattern");
      Token (Name "array_pattern");
      Token (Name "local_open_pattern");
      Token (Name "package_pattern");
      Token (Name "parenthesized_pattern");
    |];
  );
  "simple_pattern_ext",
  Some (
    Alt [|
      Token (Name "simple_pattern");
      Token (Name "extension");
    |];
  );
  "simple_type",
  Some (
    Alt [|
      Token (Name "type_variable");
      Token (Name "type_constructor_path");
      Token (Name "constructed_type");
      Token (Name "polymorphic_variant_type");
      Token (Name "package_type");
      Token (Name "hash_type");
      Token (Name "object_type");
      Token (Name "parenthesized_type");
    |];
  );
  "simple_typed",
  Some (
    Seq [
      Token (Literal ":");
      Alt [|
        Token (Name "simple_type");
        Token (Name "extension");
      |];
    ];
  );
  "string_get_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "simple_expression");
        Token (Name "extension");
      |];
      Token (Literal ".");
      Opt (
        Token (Name "indexing_operator_path");
      );
      Token (Literal "[");
      Token (Name "sequence_expression_ext");
      Token (Literal "]");
    ];
  );
  "structure",
  Some (
    Alt [|
      Repeat1 (
        Token (Literal ";;");
      );
      Seq [
        Repeat (
          Token (Literal ";;");
        );
        Alt [|
          Token (Name "structure_item_ext");
          Token (Name "toplevel_directive");
          Token (Name "expression_item");
        |];
        Repeat (
          Alt [|
            Seq [
              Repeat (
                Token (Literal ";;");
              );
              Alt [|
                Token (Name "structure_item_ext");
                Token (Name "toplevel_directive");
              |];
            ];
            Seq [
              Repeat1 (
                Token (Literal ";;");
              );
              Token (Name "expression_item");
            ];
          |];
        );
        Repeat (
          Token (Literal ";;");
        );
      ];
    |];
  );
  "structure_",
  Some (
    Seq [
      Token (Literal "struct");
      Opt (
        Token (Name "structure");
      );
      Token (Literal "end");
    ];
  );
  "structure_item",
  Some (
    Alt [|
      Token (Name "value_definition");
      Token (Name "external");
      Token (Name "type_definition");
      Token (Name "exception_definition");
      Token (Name "module_definition");
      Token (Name "module_type_definition");
      Token (Name "open_module");
      Token (Name "include_module");
      Token (Name "class_definition");
      Token (Name "class_type_definition");
      Token (Name "floating_attribute");
    |];
  );
  "structure_item_ext",
  Some (
    Alt [|
      Token (Name "structure_item");
      Token (Name "item_extension");
    |];
  );
  "tag_binding_pattern",
  Some (
    Seq [
      Token (Name "tag");
      Token (Name "binding_pattern_ext");
    ];
  );
  "tag_pattern",
  Some (
    Seq [
      Token (Name "tag");
      Token (Name "pattern_ext");
    ];
  );
  "tag_spec",
  Some (
    Alt [|
      Token (Name "type_ext");
      Token (Name "tag_specification");
    |];
  );
  "tag_specification",
  Some (
    Seq [
      Token (Name "tag");
      Opt (
        Seq [
          Token (Literal "of");
          Opt (
            Token (Literal "&");
          );
          Token (Name "type_ext");
          Repeat (
            Seq [
              Token (Literal "&");
              Token (Name "type_ext");
            ];
          );
        ];
      );
    ];
  );
  "then_clause",
  Some (
    Seq [
      Token (Literal "then");
      Alt [|
        Token (Name "expression");
        Token (Name "extension");
      |];
    ];
  );
  "try_expression",
  Some (
    Seq [
      Token (Literal "try");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "sequence_expression_ext");
      Token (Literal "with");
      Token (Name "match_cases");
    ];
  );
  "tuple_binding_pattern",
  Some (
    Seq [
      Token (Name "binding_pattern_ext");
      Token (Literal ",");
      Token (Name "binding_pattern_ext");
    ];
  );
  "tuple_pattern",
  Some (
    Seq [
      Token (Name "pattern_ext");
      Token (Literal ",");
      Token (Name "pattern_ext");
    ];
  );
  "tuple_type",
  Some (
    Seq [
      Token (Name "tuple_type_ext");
      Token (Literal "*");
      Alt [|
        Token (Name "simple_type");
        Token (Name "extension");
      |];
    ];
  );
  "tuple_type_",
  Some (
    Alt [|
      Token (Name "simple_type");
      Token (Name "tuple_type");
    |];
  );
  "tuple_type_ext",
  Some (
    Alt [|
      Token (Name "tuple_type_");
      Token (Name "extension");
    |];
  );
  "type",
  Some (
    Alt [|
      Token (Name "tuple_type_");
      Token (Name "function_type");
      Token (Name "aliased_type");
    |];
  );
  "type_binding",
  Some (
    Seq [
      Opt (
        Token (Name "type_params");
      );
      Alt [|
        Seq [
          Token (Name "identifier");
          Opt (
            Token (Name "type_equation");
          );
          Opt (
            Seq [
              Token (Literal "=");
              Opt (
                Token (Literal "private");
              );
              Alt [|
                Token (Name "variant_declaration");
                Token (Name "record_declaration");
                Token (Literal "..");
              |];
            ];
          );
          Repeat (
            Token (Name "type_constraint");
          );
        ];
        Seq [
          Token (Name "type_constructor_path");
          Token (Literal "+=");
          Opt (
            Token (Literal "private");
          );
          Token (Name "variant_declaration");
        ];
      |];
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "type_constraint",
  Some (
    Seq [
      Token (Literal "constraint");
      Token (Name "type_ext");
      Token (Literal "=");
      Token (Name "type_ext");
    ];
  );
  "type_definition",
  Some (
    Seq [
      Token (Literal "type");
      Opt (
        Token (Name "attribute");
      );
      Opt (
        Token (Literal "nonrec");
      );
      Token (Name "type_binding");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "type_binding");
        ];
      );
    ];
  );
  "type_equation",
  Some (
    Seq [
      Alt [|
        Token (Literal "=");
        Token (Literal ":=");
      |];
      Opt (
        Token (Literal "private");
      );
      Token (Name "type_ext");
    ];
  );
  "type_ext",
  Some (
    Alt [|
      Token (Name "type");
      Token (Name "extension");
    |];
  );
  "type_parameter_constraint",
  Some (
    Seq [
      Token (Literal "constraint");
      Token (Name "type_ext");
      Token (Literal "=");
      Token (Name "type_ext");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "typed",
  Some (
    Seq [
      Token (Literal ":");
      Token (Name "type_ext");
    ];
  );
  "typed_binding_pattern",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "binding_pattern_ext");
      Token (Name "typed");
      Token (Literal ")");
    ];
  );
  "typed_class_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "class_expression_ext");
      Token (Name "class_typed");
      Token (Literal ")");
    ];
  );
  "typed_expression",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "sequence_expression_ext");
      Token (Name "typed");
      Token (Literal ")");
    ];
  );
  "typed_label",
  Some (
    Seq [
      Opt (
        Token (Literal "?");
      );
      Token (Name "identifier");
      Token (Literal ":");
      Token (Name "type_ext");
    ];
  );
  "typed_module_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "module_expression");
        Token (Name "extension");
      |];
      Token (Name "module_typed");
      Token (Literal ")");
    ];
  );
  "typed_pattern",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "pattern_ext");
      Token (Name "typed");
      Token (Literal ")");
    ];
  );
  "value_definition",
  Some (
    Seq [
      Alt [|
        Seq [
          Token (Literal "let");
          Opt (
            Token (Name "attribute");
          );
          Opt (
            Token (Literal "rec");
          );
        ];
        Token (Name "let_operator");
      |];
      Token (Name "let_binding");
      Repeat (
        Seq [
          Alt [|
            Token (Literal "and");
            Token (Name "and_operator");
          |];
          Token (Name "let_binding");
        ];
      );
    ];
  );
  "value_specification",
  Some (
    Seq [
      Token (Literal "val");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "value_name");
      Token (Name "typed");
      Repeat (
        Token (Name "item_attribute");
      );
    ];
  );
  "variant_declaration",
  Some (
    Alt [|
      Seq [
        Token (Literal "|");
        Opt (
          Seq [
            Token (Name "constructor_declaration");
            Repeat (
              Seq [
                Token (Literal "|");
                Token (Name "constructor_declaration");
              ];
            );
          ];
        );
      ];
      Seq [
        Token (Name "constructor_declaration");
        Repeat (
          Seq [
            Token (Literal "|");
            Token (Name "constructor_declaration");
          ];
        );
      ];
    |];
  );
  "while_expression",
  Some (
    Seq [
      Token (Literal "while");
      Opt (
        Token (Name "attribute");
      );
      Token (Name "sequence_expression_ext");
      Token (Name "do_clause");
    ];
  );
  "compilation_unit",
  Some (
    Seq [
      Opt (
        Token (Name "shebang");
      );
      Opt (
        Token (Name "structure");
      );
    ];
  );
]

let trans_match_operator ((kind, body) : mt) : CST.match_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_and_operator_ ((kind, body) : mt) : CST.and_operator_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `AMP (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `AMPAMP (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_or_operator ((kind, body) : mt) : CST.or_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Or (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `BARBAR (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_hash_operator ((kind, body) : mt) : CST.hash_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_60fc52b ((kind, body) : mt) : CST.pat_60fc52b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_choice_pat_4349e4b ((kind, body) : mt) : CST.tok_choice_pat_4349e4b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pretty_printing_indication ((kind, body) : mt) : CST.pretty_printing_indication =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_add_operator ((kind, body) : mt) : CST.add_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_prefix_operator ((kind, body) : mt) : CST.prefix_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_6cdf4be ((kind, body) : mt) : CST.pat_6cdf4be =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_and_operator ((kind, body) : mt) : CST.and_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_conversion_specification ((kind, body) : mt) : CST.conversion_specification =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_lbrackatat ((kind, body) : mt) : CST.imm_tok_lbrackatat =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3d340f6 ((kind, body) : mt) : CST.pat_3d340f6 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_rel_operator ((kind, body) : mt) : CST.rel_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_starstar_rep_pat_2ed1ddf ((kind, body) : mt) : CST.tok_starstar_rep_pat_2ed1ddf =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unit_ ((kind, body) : mt) : CST.unit_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_RPAR (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Begin_end (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_boolean ((kind, body) : mt) : CST.boolean =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `True (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `False (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_concat_operator ((kind, body) : mt) : CST.concat_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_indexing_operator ((kind, body) : mt) : CST.indexing_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_3bf11d1 ((kind, body) : mt) : CST.pat_3bf11d1 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_number ((kind, body) : mt) : CST.number =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_null ((kind, body) : mt) : CST.null =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_lf ((kind, body) : mt) : CST.imm_tok_lf =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ocamlyacc_value ((kind, body) : mt) : CST.ocamlyacc_value =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_shebang ((kind, body) : mt) : CST.shebang =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_refutation_case ((kind, body) : mt) : CST.refutation_case =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_ht ((kind, body) : mt) : CST.imm_tok_ht =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_d43393f ((kind, body) : mt) : CST.pat_d43393f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_pat_714c625 ((kind, body) : mt) : CST.pat_714c625 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_19aaf34 ((kind, body) : mt) : CST.pat_19aaf34 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_let_operator ((kind, body) : mt) : CST.let_operator =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9465c8b ((kind, body) : mt) : CST.pat_9465c8b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_assign_operator ((kind, body) : mt) : CST.assign_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `COLONEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_tok_pat_9ed5fa7_rep_pat_2ed1ddf ((kind, body) : mt) : CST.tok_pat_9ed5fa7_rep_pat_2ed1ddf =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_86b875b ((kind, body) : mt) : CST.pat_86b875b =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_colon ((kind, body) : mt) : CST.imm_tok_colon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_lbrackatatat ((kind, body) : mt) : CST.imm_tok_lbrackatatat =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_capitalized_identifier ((kind, body) : mt) : CST.capitalized_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_left_quoted_string_delimiter ((kind, body) : mt) : CST.left_quoted_string_delimiter =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_space ((kind, body) : mt) : CST.imm_tok_space =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_21333c0 ((kind, body) : mt) : CST.pat_21333c0 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_sign_operator ((kind, body) : mt) : CST.sign_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `PLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `DASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `PLUSDOT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `DASHDOT (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_imm_tok_lbrackat ((kind, body) : mt) : CST.imm_tok_lbrackat =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_right_quoted_string_delimiter ((kind, body) : mt) : CST.right_quoted_string_delimiter =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_signed_number ((kind, body) : mt) : CST.signed_number =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_tok_choice_pat_4349e4b (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pow_operator ((kind, body) : mt) : CST.pow_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tok_star_rep_pat_2ed1ddf (
            trans_tok_starstar_rep_pat_2ed1ddf (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Lsl (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Lsr (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Asr (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false






let trans_label ((kind, body) : mt) : CST.label =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `TILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `QMARK (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_abstract_type ((kind, body) : mt) : CST.abstract_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_mult_operator ((kind, body) : mt) : CST.mult_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tok_pat_9ed5fa7_rep_pat_2ed1ddf (
            trans_tok_pat_9ed5fa7_rep_pat_2ed1ddf (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Mod (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Land (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Lor (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Lxor (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_variable ((kind, body) : mt) : CST.type_variable =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capi_id (
                  trans_capitalized_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_directive ((kind, body) : mt) : CST.directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capi_id (
                  trans_capitalized_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_attribute_id ((kind, body) : mt) : CST.attribute_id =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capi_id (
                  trans_capitalized_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Capi_id (
                            trans_capitalized_identifier (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let rec trans_extended_module_path ((kind, body) : mt) : CST.extended_module_path =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_capi_id (
            (match v with
            | Alt (0, v) ->
                `Capi_id (
                  trans_capitalized_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte_module_path_DOT_capi_id (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_extended_module_path (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_capitalized_identifier (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exte_module_path_LPAR_exte_module_path_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_extended_module_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_extended_module_path (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_module_path ((kind, body) : mt) : CST.module_path =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Capi_id (
            trans_capitalized_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Module_path_DOT_capi_id (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_module_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_capitalized_identifier (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_tag ((kind, body) : mt) : CST.tag =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Capi_id (
                  trans_capitalized_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_60fc52b (
            trans_pat_60fc52b (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_86b875b (
            trans_pat_86b875b (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_3bf11d1 (
            trans_pat_3bf11d1 (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Pat_21333c0 (
            trans_pat_21333c0 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_string_content ((kind, body) : mt) : CST.quoted_string_content =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Imm_tok_sp (
                trans_imm_tok_space (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Imm_tok_lf (
                trans_imm_tok_lf (Run.matcher_token v)
              )
          | Alt (2, v) ->
              `Imm_tok_ht (
                trans_imm_tok_ht (Run.matcher_token v)
              )
          | Alt (3, v) ->
              `Imm_tok_lbra_c9d51a3 (
                trans_imm_tok_lbrackat (Run.matcher_token v)
              )
          | Alt (4, v) ->
              `Imm_tok_lbra_0289a62 (
                trans_imm_tok_lbrackatat (Run.matcher_token v)
              )
          | Alt (5, v) ->
              `Imm_tok_lbra_72ad36a (
                trans_imm_tok_lbrackatatat (Run.matcher_token v)
              )
          | Alt (6, v) ->
              `Pat_714c625 (
                trans_pat_714c625 (Run.matcher_token v)
              )
          | Alt (7, v) ->
              `Null (
                trans_null (Run.matcher_token v)
              )
          | Alt (8, v) ->
              `Conv_spec (
                trans_conversion_specification (Run.matcher_token v)
              )
          | Alt (9, v) ->
              `Pretty_prin_indi (
                trans_pretty_printing_indication (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_parenthesized_abstract_type ((kind, body) : mt) : CST.parenthesized_abstract_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_abstract_type (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_infix_operator ((kind, body) : mt) : CST.infix_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Hash_op (
            trans_hash_operator (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pow_op (
            trans_pow_operator (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Mult_op (
            trans_mult_operator (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Add_op (
            trans_add_operator (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Concat_op (
            trans_concat_operator (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Rel_op (
            trans_rel_operator (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `And_op_ (
            trans_and_operator_ (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Or_op (
            trans_or_operator (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Assign_op (
            trans_assign_operator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_param ((kind, body) : mt) : CST.type_param =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `PLUS_opt_BANG (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            Run.opt
                              (fun v -> Run.trans_token (Run.matcher_token v))
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `DASH_opt_BANG (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            Run.opt
                              (fun v -> Run.trans_token (Run.matcher_token v))
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (2, v) ->
                    `BANG_opt_choice_PLUS (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            Run.opt
                              (fun v ->
                                (match v with
                                | Alt (0, v) ->
                                    `PLUS (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `DASH (
                                      Run.trans_token (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Type_var (
                  trans_type_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `X__ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_attribute ((kind, body) : mt) : CST.attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_attribute_id (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_module_type_path ((kind, body) : mt) : CST.module_type_path =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_capi_id (
            (match v with
            | Alt (0, v) ->
                `Capi_id (
                  trans_capitalized_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exte_module_path_DOT_choice_capi_id (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_extended_module_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Capi_id (
                        trans_capitalized_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_constructor_path ((kind, body) : mt) : CST.type_constructor_path =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte_module_path_DOT_id (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_extended_module_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_identifier (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_class_type_path ((kind, body) : mt) : CST.class_type_path =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte_module_path_DOT_id (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_extended_module_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_identifier (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_field_path ((kind, body) : mt) : CST.field_path =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Module_path_DOT_id (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_module_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_identifier (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_class_path ((kind, body) : mt) : CST.class_path =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Module_path_DOT_id (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_module_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_identifier (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_constructor_path ((kind, body) : mt) : CST.constructor_path =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_capi_id (
            (match v with
            | Alt (0, v) ->
                `Capi_id (
                  trans_capitalized_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_COLONCOLON_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Module_path_DOT_choice_capi_id (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_module_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Capi_id (
                        trans_capitalized_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `LPAR_COLONCOLON_RPAR (
                        (match v with
                        | Seq [v0; v1; v2] ->
                            (
                              Run.trans_token (Run.matcher_token v0),
                              Run.trans_token (Run.matcher_token v1),
                              Run.trans_token (Run.matcher_token v2)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_constrain_module ((kind, body) : mt) : CST.constrain_module =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_module_path (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `COLONEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_extended_module_path (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_indexing_operator_path ((kind, body) : mt) : CST.indexing_operator_path =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Inde_op (
            trans_indexing_operator (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Module_path_DOT_inde_op (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_module_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_indexing_operator (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_character_content ((kind, body) : mt) : CST.character_content =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_d43393f (
            trans_pat_d43393f (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Null (
            trans_null (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Esc_seq (
            trans_escape_sequence (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_content ((kind, body) : mt) : CST.string_content =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Imm_tok_sp (
                trans_imm_tok_space (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Imm_tok_lf (
                trans_imm_tok_lf (Run.matcher_token v)
              )
          | Alt (2, v) ->
              `Imm_tok_ht (
                trans_imm_tok_ht (Run.matcher_token v)
              )
          | Alt (3, v) ->
              `Imm_tok_lbra_c9d51a3 (
                trans_imm_tok_lbrackat (Run.matcher_token v)
              )
          | Alt (4, v) ->
              `Imm_tok_lbra_0289a62 (
                trans_imm_tok_lbrackatat (Run.matcher_token v)
              )
          | Alt (5, v) ->
              `Imm_tok_lbra_72ad36a (
                trans_imm_tok_lbrackatatat (Run.matcher_token v)
              )
          | Alt (6, v) ->
              `Pat_19aaf34 (
                trans_pat_19aaf34 (Run.matcher_token v)
              )
          | Alt (7, v) ->
              `Null (
                trans_null (Run.matcher_token v)
              )
          | Alt (8, v) ->
              `Esc_seq (
                trans_escape_sequence (Run.matcher_token v)
              )
          | Alt (9, v) ->
              `Pat_6cdf4be (
                trans_pat_6cdf4be (Run.matcher_token v)
              )
          | Alt (10, v) ->
              `Pat_9465c8b (
                trans_pat_9465c8b (Run.matcher_token v)
              )
          | Alt (11, v) ->
              `Conv_spec (
                trans_conversion_specification (Run.matcher_token v)
              )
          | Alt (12, v) ->
              `Pretty_prin_indi (
                trans_pretty_printing_indication (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_quoted_string ((kind, body) : mt) : CST.quoted_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_left_quoted_string_delimiter (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_quoted_string_content (Run.matcher_token v))
              v2
            ,
            trans_right_quoted_string_delimiter (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_extension ((kind, body) : mt) : CST.quoted_extension =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_attribute_id (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_pat_3d340f6 (Run.matcher_token v))
              v2
            ,
            trans_left_quoted_string_delimiter (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_quoted_string_content (Run.matcher_token v))
              v4
            ,
            trans_right_quoted_string_delimiter (Run.matcher_token v5),
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_parenthesized_operator ((kind, body) : mt) : CST.parenthesized_operator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Prefix_op (
                  trans_prefix_operator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Sign_op (
                  trans_sign_operator (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Infix_op (
                  trans_infix_operator (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `DOT_inde_op_choice_LPAR_opt_SEMI_DOTDOT_RPAR_opt_LTDASH (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_indexing_operator (Run.matcher_token v1),
                        (match v2 with
                        | Alt (0, v) ->
                            `LPAR_opt_SEMI_DOTDOT_RPAR (
                              (match v with
                              | Seq [v0; v1; v2] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    Run.opt
                                      (fun v ->
                                        (match v with
                                        | Seq [v0; v1] ->
                                            (
                                              Run.trans_token (Run.matcher_token v0),
                                              Run.trans_token (Run.matcher_token v1)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                      v1
                                    ,
                                    Run.trans_token (Run.matcher_token v2)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (1, v) ->
                            `LBRACK_opt_SEMI_DOTDOT_RBRACK (
                              (match v with
                              | Seq [v0; v1; v2] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    Run.opt
                                      (fun v ->
                                        (match v with
                                        | Seq [v0; v1] ->
                                            (
                                              Run.trans_token (Run.matcher_token v0),
                                              Run.trans_token (Run.matcher_token v1)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                      v1
                                    ,
                                    Run.trans_token (Run.matcher_token v2)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (2, v) ->
                            `LCURL_opt_SEMI_DOTDOT_RCURL (
                              (match v with
                              | Seq [v0; v1; v2] ->
                                  (
                                    Run.trans_token (Run.matcher_token v0),
                                    Run.opt
                                      (fun v ->
                                        (match v with
                                        | Seq [v0; v1] ->
                                            (
                                              Run.trans_token (Run.matcher_token v0),
                                              Run.trans_token (Run.matcher_token v1)
                                            )
                                        | _ -> assert false
                                        )
                                      )
                                      v1
                                    ,
                                    Run.trans_token (Run.matcher_token v2)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v3
                      )
                  | _ -> assert false
                  )
                )
            | Alt (4, v) ->
                `Let_op (
                  trans_let_operator (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `And_op (
                  trans_and_operator (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Match_op (
                  trans_match_operator (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_params ((kind, body) : mt) : CST.type_params =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Type_param (
            trans_type_param (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `LPAR_type_param_rep_COMMA_type_param_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_type_param (Run.matcher_token v1),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_type_param (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                  ,
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_polymorphic_variant_pattern ((kind, body) : mt) : CST.polymorphic_variant_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_constructor_path (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_new_expression ((kind, body) : mt) : CST.new_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_class_path (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_character ((kind, body) : mt) : CST.character =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_character_content (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_string_content (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_value_pattern ((kind, body) : mt) : CST.value_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Paren_op (
            trans_parenthesized_operator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_value_name ((kind, body) : mt) : CST.value_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Paren_op (
            trans_parenthesized_operator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_constant ((kind, body) : mt) : CST.constant =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Num (
            trans_number (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Char (
            trans_character (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Quoted_str (
            trans_quoted_string (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Bool (
            trans_boolean (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Unit (
            trans_unit_ (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_value_path ((kind, body) : mt) : CST.value_path =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Value_name (
            trans_value_name (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Module_path_DOT_value_name (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_module_path (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_value_name (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_signed_constant ((kind, body) : mt) : CST.signed_constant =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Cst (
            trans_constant (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Signed_num (
            trans_signed_number (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_toplevel_directive ((kind, body) : mt) : CST.toplevel_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_directive (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Cst (
                      trans_constant (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Value_path (
                      trans_value_path (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Module_path (
                      trans_module_path (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_range_pattern ((kind, body) : mt) : CST.range_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_signed_constant (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_signed_constant (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_alias_binding_pattern ((kind, body) : mt) : CST.alias_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_binding_pattern_ext (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_value_name (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_alias_pattern ((kind, body) : mt) : CST.alias_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pattern_ext (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_value_pattern (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_aliased_type ((kind, body) : mt) : CST.aliased_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_type_ext (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_type_variable (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_application_expression ((kind, body) : mt) : CST.application_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat1
              (fun v -> trans_argument (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_argument ((kind, body) : mt) : CST.argument =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_simple_exp (
            (match v with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Labe_arg (
            trans_labeled_argument (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_binding_pattern ((kind, body) : mt) : CST.array_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_binding_pattern_ext (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_binding_pattern_ext (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_expression ((kind, body) : mt) : CST.array_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exte (
                            trans_extension (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Exp (
                                      trans_expression (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Exte (
                                      trans_extension (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_get_expression ((kind, body) : mt) : CST.array_get_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                trans_indexing_operator_path (Run.matcher_token v)
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_sequence_expression_ext (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_pattern ((kind, body) : mt) : CST.array_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_pattern_ext (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_pattern_ext (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assert_expression ((kind, body) : mt) : CST.assert_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_attribute_payload ((kind, body) : mt) : CST.attribute_payload =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Stru (
            trans_structure (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `COLON_choice_type_ext (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Type_ext (
                        trans_type_ext (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Sign (
                        trans_signature (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `QMARK_pat_ext_opt_guard (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_pattern_ext (Run.matcher_token v1),
                  Run.opt
                    (fun v -> trans_guard (Run.matcher_token v))
                    v2
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bigarray_get_expression ((kind, body) : mt) : CST.bigarray_get_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                trans_indexing_operator_path (Run.matcher_token v)
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_sequence_expression_ext (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binding_pattern ((kind, body) : mt) : CST.binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Value_name (
            trans_value_name (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Signed_cst (
            trans_signed_constant (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Typed_bind_pat (
            trans_typed_binding_pattern (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Cons_path (
            trans_constructor_path (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Tag (
            trans_tag (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Poly_vari_pat (
            trans_polymorphic_variant_pattern (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Record_bind_pat (
            trans_record_binding_pattern (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `List_bind_pat (
            trans_list_binding_pattern (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Array_bind_pat (
            trans_array_binding_pattern (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Local_open_bind_pat (
            trans_local_open_binding_pattern (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Pack_pat (
            trans_package_pattern (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Paren_bind_pat (
            trans_parenthesized_binding_pattern (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Alias_bind_pat (
            trans_alias_binding_pattern (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Or_bind_pat (
            trans_or_binding_pattern (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Cons_bind_pat_1ca6430 (
            trans_constructor_binding_pattern (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Tag_bind_pat (
            trans_tag_binding_pattern (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Tuple_bind_pat (
            trans_tuple_binding_pattern (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Cons_bind_pat_f2d0ae9 (
            trans_cons_binding_pattern (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Range_pat (
            trans_range_pattern (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Lazy_bind_pat (
            trans_lazy_binding_pattern (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binding_pattern_ext ((kind, body) : mt) : CST.binding_pattern_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Bind_pat (
            trans_binding_pattern (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_application ((kind, body) : mt) : CST.class_application =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_simple_class_expression (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_argument (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_binding ((kind, body) : mt) : CST.class_binding =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_param (Run.matcher_token v1),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_type_param (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                      ,
                      Run.trans_token (Run.matcher_token v3)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_identifier (Run.matcher_token v2),
            Run.repeat
              (fun v -> trans_parameter (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v -> trans_class_typed (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_class_expression_ext (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_body_type ((kind, body) : mt) : CST.class_body_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ext (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Class_field_spec_ext (
                      trans_class_field_specification_ext (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Floa_attr (
                      trans_floating_attribute (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_definition ((kind, body) : mt) : CST.class_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_class_binding (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_class_binding (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_expression ((kind, body) : mt) : CST.class_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_class_exp (
            trans_simple_class_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Class_func (
            trans_class_function (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Class_app (
            trans_class_application (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Let_class_exp (
            trans_let_class_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Let_open_class_exp (
            trans_let_open_class_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_expression_ext ((kind, body) : mt) : CST.class_expression_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Class_exp (
            trans_class_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_field ((kind, body) : mt) : CST.class_field =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Inhe_defi (
            trans_inheritance_definition (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Inst_var_defi (
            trans_instance_variable_definition (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Meth_defi (
            trans_method_definition (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Type_param_cons (
            trans_type_parameter_constraint (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Class_init (
            trans_class_initializer (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_field_ext ((kind, body) : mt) : CST.class_field_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Class_field (
            trans_class_field (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Item_exte (
            trans_item_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_field_specification ((kind, body) : mt) : CST.class_field_specification =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Inhe_spec (
            trans_inheritance_specification (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Inst_var_spec (
            trans_instance_variable_specification (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Meth_spec (
            trans_method_specification (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Type_param_cons (
            trans_type_parameter_constraint (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_field_specification_ext ((kind, body) : mt) : CST.class_field_specification_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Class_field_spec (
            trans_class_field_specification (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Item_exte (
            trans_item_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_function ((kind, body) : mt) : CST.class_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_parameter (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_class_expression_ext (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_function_type ((kind, body) : mt) : CST.class_function_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v0
                      ,
                      trans_identifier (Run.matcher_token v1),
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_tuple_type_ext (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_class_type_ext (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_initializer ((kind, body) : mt) : CST.class_initializer =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_sequence_expression_ext (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_type ((kind, body) : mt) : CST.class_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_class_type (
            trans_simple_class_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Class_func_type (
            trans_class_function_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_type_binding ((kind, body) : mt) : CST.class_type_binding =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_param (Run.matcher_token v1),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_type_param (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                      ,
                      Run.trans_token (Run.matcher_token v3)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_identifier (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_simple_class_type_ext (Run.matcher_token v4),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_type_definition ((kind, body) : mt) : CST.class_type_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            trans_class_type_binding (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_class_type_binding (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_type_ext ((kind, body) : mt) : CST.class_type_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Class_type (
            trans_class_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_typed ((kind, body) : mt) : CST.class_typed =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_class_type_ext (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_coercion_expression ((kind, body) : mt) : CST.coercion_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_sequence_expression_ext (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_typed (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_type_ext (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_cons_binding_pattern ((kind, body) : mt) : CST.cons_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_binding_pattern_ext (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_binding_pattern_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_cons_expression ((kind, body) : mt) : CST.cons_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_cons_pattern ((kind, body) : mt) : CST.cons_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pattern_ext (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pattern_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constrain_module_type ((kind, body) : mt) : CST.constrain_module_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_module_type_path (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `COLONEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v4 with
            | Alt (0, v) ->
                `Module_type (
                  trans_module_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constrain_type ((kind, body) : mt) : CST.constrain_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_type_params (Run.matcher_token v))
              v1
            ,
            trans_type_constructor_path (Run.matcher_token v2),
            trans_type_equation (Run.matcher_token v3),
            Run.repeat
              (fun v -> trans_type_constraint (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructed_type ((kind, body) : mt) : CST.constructed_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_simple_type (
                  (match v with
                  | Alt (0, v) ->
                      `Simple_type (
                        trans_simple_type (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LPAR_type_ext_rep_COMMA_type_ext_RPAR (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_type_ext (Run.matcher_token v1),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_type_ext (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                        ,
                        Run.trans_token (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            trans_type_constructor_path (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_argument ((kind, body) : mt) : CST.constructor_argument =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_simple_type_rep_STAR_choice_simple_type (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Simple_type (
                        trans_simple_type (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            (match v1 with
                            | Alt (0, v) ->
                                `Simple_type (
                                  trans_simple_type (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Exte (
                                  trans_extension (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Record_decl (
            trans_record_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_binding_pattern ((kind, body) : mt) : CST.constructor_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_constructor_path (Run.matcher_token v0),
            trans_binding_pattern_ext (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_declaration ((kind, body) : mt) : CST.constructor_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_capi_id (
                  (match v with
                  | Alt (0, v) ->
                      `Capi_id (
                        trans_capitalized_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `LPAR_COLONCOLON_RPAR (
                        (match v with
                        | Seq [v0; v1; v2] ->
                            (
                              Run.trans_token (Run.matcher_token v0),
                              Run.trans_token (Run.matcher_token v1),
                              Run.trans_token (Run.matcher_token v2)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_LBRACK_RBRACK (
                  (match v with
                  | Alt (0, v) ->
                      `LBRACK_RBRACK (
                        (match v with
                        | Seq [v0; v1] ->
                            (
                              Run.trans_token (Run.matcher_token v0),
                              Run.trans_token (Run.matcher_token v1)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `LPAR_RPAR (
                        (match v with
                        | Seq [v0; v1] ->
                            (
                              Run.trans_token (Run.matcher_token v0),
                              Run.trans_token (Run.matcher_token v1)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (2, v) ->
                      `True (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `False (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Of_cons_arg (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_constructor_argument (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Simple_typed (
                      trans_simple_typed (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `COLON_cons_arg_DASHGT_choice_simple_type (
                      (match v with
                      | Seq [v0; v1; v2; v3] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_constructor_argument (Run.matcher_token v1),
                            Run.trans_token (Run.matcher_token v2),
                            (match v3 with
                            | Alt (0, v) ->
                                `Simple_type (
                                  trans_simple_type (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Exte (
                                  trans_extension (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (3, v) ->
                    `EQ_cons_path (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_constructor_path (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_constructor_pattern ((kind, body) : mt) : CST.constructor_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_constructor_path (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_parenthesized_abstract_type (Run.matcher_token v)
              )
              v1
            ,
            trans_pattern_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_clause ((kind, body) : mt) : CST.do_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_sequence_expression_ext (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_clause ((kind, body) : mt) : CST.else_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_exception_definition ((kind, body) : mt) : CST.exception_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_constructor_declaration (Run.matcher_token v2),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_exception_pattern ((kind, body) : mt) : CST.exception_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_pattern_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_exp (
            trans_simple_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prod_exp (
            trans_product_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Cons_exp (
            trans_cons_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `App_exp (
            trans_application_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Infix_exp (
            trans_infix_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Sign_exp (
            trans_sign_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Set_exp (
            trans_set_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `If_exp (
            trans_if_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `While_exp (
            trans_while_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `For_exp (
            trans_for_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Match_exp (
            trans_match_expression (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Func_exp (
            trans_function_expression (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Fun_exp (
            trans_fun_expression (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Try_exp (
            trans_try_expression (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Let_exp (
            trans_let_expression (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Assert_exp (
            trans_assert_expression (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Lazy_exp (
            trans_lazy_expression (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Let_module_exp (
            trans_let_module_expression (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Let_open_exp (
            trans_let_open_expression (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Let_exc_exp (
            trans_let_exception_expression (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Obj_exp (
            trans_object_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_item ((kind, body) : mt) : CST.expression_item =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_sequence_expression_ext (Run.matcher_token v0),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_extension ((kind, body) : mt) : CST.extension =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exte_ (
            trans_extension_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Quoted_exte (
            trans_quoted_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_extension_ ((kind, body) : mt) : CST.extension_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_attribute_id (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_attribute_payload (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_external_ ((kind, body) : mt) : CST.external_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_value_name (Run.matcher_token v2),
            trans_typed (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4),
            Run.repeat1
              (fun v -> trans_string_ (Run.matcher_token v))
              v5
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_binding_pattern ((kind, body) : mt) : CST.field_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_field_path (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_typed (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_binding_pattern_ext (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_declaration ((kind, body) : mt) : CST.field_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1),
            trans_polymorphic_typed (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_expression ((kind, body) : mt) : CST.field_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_field_path (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_typed (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exte (
                            trans_extension (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_get_expression ((kind, body) : mt) : CST.field_get_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_field_path (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_pattern ((kind, body) : mt) : CST.field_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_field_path (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_typed (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_pattern_ext (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_floating_attribute ((kind, body) : mt) : CST.floating_attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_attribute_id (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_attribute_payload (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_expression ((kind, body) : mt) : CST.for_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_value_pattern (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_sequence_expression_ext (Run.matcher_token v4),
            (match v5 with
            | Alt (0, v) ->
                `To (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Downto (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_sequence_expression_ext (Run.matcher_token v6),
            trans_do_clause (Run.matcher_token v7)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fun_expression ((kind, body) : mt) : CST.fun_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            Run.repeat1
              (fun v -> trans_parameter (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_simple_typed (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            trans_sequence_expression_ext (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_expression ((kind, body) : mt) : CST.function_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_match_cases (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_type ((kind, body) : mt) : CST.function_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Typed_label (
                  trans_typed_label (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_ext (
                  trans_type_ext (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_functor_ ((kind, body) : mt) : CST.functor_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_module_parameter (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Module_exp (
                  trans_module_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_functor_type ((kind, body) : mt) : CST.functor_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Func_rep_module_param (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.repeat
                          (fun v -> trans_module_parameter (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_module_type (
                  (match v with
                  | Alt (0, v) ->
                      `Module_type (
                        trans_module_type (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Module_type (
                  trans_module_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_guard ((kind, body) : mt) : CST.guard =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_sequence_expression_ext (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_hash_expression ((kind, body) : mt) : CST.hash_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_hash_operator (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_hash_type ((kind, body) : mt) : CST.hash_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_simple_type (
                      (match v with
                      | Alt (0, v) ->
                          `Simple_type (
                            trans_simple_type (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exte (
                            trans_extension (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `LPAR_type_ext_rep_COMMA_type_ext_RPAR (
                      (match v with
                      | Seq [v0; v1; v2; v3] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_type_ext (Run.matcher_token v1),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_type_ext (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v2
                            ,
                            Run.trans_token (Run.matcher_token v3)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_class_type_path (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_expression ((kind, body) : mt) : CST.if_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_sequence_expression_ext (Run.matcher_token v2),
            trans_then_clause (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_else_clause (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_include_module ((kind, body) : mt) : CST.include_module =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Module_exp (
                  trans_module_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_include_module_type ((kind, body) : mt) : CST.include_module_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Module_type (
                  trans_module_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_infix_expression ((kind, body) : mt) : CST.infix_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_exp_pow_op_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_pow_operator (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_exp_mult_op_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_mult_operator (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Choice_exp_add_op_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_add_operator (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Choice_exp_concat_op_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_concat_operator (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Choice_exp_rel_op_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_rel_operator (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Choice_exp_and_op__choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_and_operator_ (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Choice_exp_or_op_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_or_operator (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Choice_exp_assign_op_choice_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_assign_operator (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Exp (
                        trans_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inheritance_definition ((kind, body) : mt) : CST.inheritance_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_class_expression_ext (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_value_pattern (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_inheritance_specification ((kind, body) : mt) : CST.inheritance_specification =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_simple_class_type_ext (Run.matcher_token v1),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_instance_variable_definition ((kind, body) : mt) : CST.instance_variable_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Muta (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Virt (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_identifier (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_typed (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ext (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_sequence_expression_ext (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v6
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v7
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_instance_variable_expression ((kind, body) : mt) : CST.instance_variable_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exte (
                            trans_extension (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_instance_variable_specification ((kind, body) : mt) : CST.instance_variable_specification =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Muta (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Virt (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_identifier (Run.matcher_token v2),
            trans_typed (Run.matcher_token v3),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_instantiated_class ((kind, body) : mt) : CST.instantiated_class =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ext (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ext (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_class_path (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_instantiated_class_type ((kind, body) : mt) : CST.instantiated_class_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ext (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_ext (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_class_type_path (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_item_attribute ((kind, body) : mt) : CST.item_attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_attribute_id (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_attribute_payload (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_item_extension ((kind, body) : mt) : CST.item_extension =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Item_exte_ (
            trans_item_extension_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Quoted_item_exte (
            trans_quoted_item_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_item_extension_ ((kind, body) : mt) : CST.item_extension_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_attribute_id (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_attribute_payload (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_labeled_argument ((kind, body) : mt) : CST.labeled_argument =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Label (
            trans_label (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Label_imm_tok_colon_choice_simple_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_label (Run.matcher_token v0),
                  trans_imm_tok_colon (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Simple_exp (
                        trans_simple_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Exte (
                        trans_extension (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lazy_binding_pattern ((kind, body) : mt) : CST.lazy_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_binding_pattern_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lazy_expression ((kind, body) : mt) : CST.lazy_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lazy_pattern ((kind, body) : mt) : CST.lazy_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_pattern_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_binding ((kind, body) : mt) : CST.let_binding =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_binding_pattern_ext (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3; v4] ->
                    (
                      Run.repeat
                        (fun v -> trans_parameter (Run.matcher_token v))
                        v0
                      ,
                      Run.opt
                        (fun v -> trans_polymorphic_typed (Run.matcher_token v))
                        v1
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_type_ext (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                      ,
                      Run.trans_token (Run.matcher_token v3),
                      trans_sequence_expression_ext (Run.matcher_token v4)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_class_expression ((kind, body) : mt) : CST.let_class_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_value_definition (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_class_expression_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_exception_expression ((kind, body) : mt) : CST.let_exception_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_exception_definition (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_sequence_expression_ext (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_expression ((kind, body) : mt) : CST.let_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_value_definition (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_sequence_expression_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_module_expression ((kind, body) : mt) : CST.let_module_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_module_definition (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_sequence_expression_ext (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_open_class_expression ((kind, body) : mt) : CST.let_open_class_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_open_module (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_class_expression_ext (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_open_class_type ((kind, body) : mt) : CST.let_open_class_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_open_module (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_simple_class_type_ext (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_open_expression ((kind, body) : mt) : CST.let_open_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_open_module (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_sequence_expression_ext (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_binding_pattern ((kind, body) : mt) : CST.list_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_binding_pattern_ext (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_binding_pattern_ext (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_expression ((kind, body) : mt) : CST.list_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Exp (
                            trans_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exte (
                            trans_extension (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Exp (
                                      trans_expression (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Exte (
                                      trans_extension (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_pattern ((kind, body) : mt) : CST.list_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_pattern_ext (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_pattern_ext (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_open_binding_pattern ((kind, body) : mt) : CST.local_open_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_module_path (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `LPAR_opt_bind_pat_ext_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_binding_pattern_ext (Run.matcher_token v))
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `List_bind_pat (
                  trans_list_binding_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Array_bind_pat (
                  trans_array_binding_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Record_bind_pat (
                  trans_record_binding_pattern (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_open_expression ((kind, body) : mt) : CST.local_open_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_module_path (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `LPAR_opt_seq_exp_ext_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v ->
                            trans_sequence_expression_ext (Run.matcher_token v)
                          )
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `List_exp (
                  trans_list_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Array_exp (
                  trans_array_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Record_exp (
                  trans_record_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Obj_copy_exp (
                  trans_object_copy_expression (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Pack_exp (
                  trans_package_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_open_pattern ((kind, body) : mt) : CST.local_open_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_module_path (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `LPAR_opt_pat_ext_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_pattern_ext (Run.matcher_token v))
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `List_pat (
                  trans_list_pattern (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Array_pat (
                  trans_array_pattern (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Record_pat (
                  trans_record_pattern (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_case ((kind, body) : mt) : CST.match_case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pattern_ext (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_guard (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Seq_exp_ext (
                  trans_sequence_expression_ext (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Refu_case (
                  trans_refutation_case (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_cases ((kind, body) : mt) : CST.match_cases =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_match_case (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_match_case (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_expression ((kind, body) : mt) : CST.match_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Match_opt_attr (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_attribute (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Match_op (
                  trans_match_operator (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_sequence_expression_ext (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_match_cases (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_definition ((kind, body) : mt) : CST.method_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Priv (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Virt (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_identifier (Run.matcher_token v3),
            Run.repeat
              (fun v -> trans_parameter (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_polymorphic_typed (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_sequence_expression_ext (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v6
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v7
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_invocation ((kind, body) : mt) : CST.method_invocation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_specification ((kind, body) : mt) : CST.method_specification =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Priv (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Virt (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_identifier (Run.matcher_token v2),
            trans_polymorphic_typed (Run.matcher_token v3),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_type ((kind, body) : mt) : CST.method_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            trans_polymorphic_typed (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_application ((kind, body) : mt) : CST.module_application =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Module_exp (
                  trans_module_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Simple_module_exp_ext (
                  trans_simple_module_expression_ext (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_RPAR (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_binding ((kind, body) : mt) : CST.module_binding =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Capi_id (
                  trans_capitalized_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `X__ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v -> trans_module_parameter (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_module_typed (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Module_exp (
                            trans_module_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exte (
                            trans_extension (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_definition ((kind, body) : mt) : CST.module_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            trans_module_binding (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_module_binding (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_expression ((kind, body) : mt) : CST.module_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_module_exp (
            trans_simple_module_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Module_path (
            trans_module_path (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Stru_ (
            trans_structure_ (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Func (
            trans_functor_ (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Module_app (
            trans_module_application (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_parameter ((kind, body) : mt) : CST.module_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Capi_id (
                            trans_capitalized_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `X__ (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      trans_module_typed (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_type ((kind, body) : mt) : CST.module_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Module_type_path (
            trans_module_type_path (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Sign_ (
            trans_signature_ (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Module_type_cons (
            trans_module_type_constraint (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Module_type_of (
            trans_module_type_of (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Func_type (
            trans_functor_type (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Paren_module_type (
            trans_parenthesized_module_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_type_constraint ((kind, body) : mt) : CST.module_type_constraint =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Module_type (
                  trans_module_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Cons_type (
                  trans_constrain_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Cons_module (
                  trans_constrain_module (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cons_module_type (
                  trans_constrain_module_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Cons_type (
                            trans_constrain_type (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Cons_module (
                            trans_constrain_module (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Cons_module_type (
                            trans_constrain_module_type (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_type_definition ((kind, body) : mt) : CST.module_type_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Capi_id (
                  trans_capitalized_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `EQ (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `COLONEQ (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Module_type (
                            trans_module_type (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exte (
                            trans_extension (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_type_of ((kind, body) : mt) : CST.module_type_of =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Module_exp (
                  trans_module_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_typed ((kind, body) : mt) : CST.module_typed =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Module_type (
                  trans_module_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_copy_expression ((kind, body) : mt) : CST.object_copy_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_instance_variable_expression (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_instance_variable_expression (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_expression ((kind, body) : mt) : CST.object_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_pattern_ext (Run.matcher_token v1),
                      Run.opt
                        (fun v -> trans_typed (Run.matcher_token v))
                        v2
                      ,
                      Run.trans_token (Run.matcher_token v3)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Class_field_ext (
                      trans_class_field_ext (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Floa_attr (
                      trans_floating_attribute (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_type ((kind, body) : mt) : CST.object_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Choice_meth_type_rep_SEMI_choice_meth_type_opt_SEMI_opt_DOTDOT (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Meth_type (
                                  trans_method_type (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Choice_simple_type (
                                  (match v with
                                  | Alt (0, v) ->
                                      `Simple_type (
                                        trans_simple_type (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Exte (
                                        trans_extension (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      (match v1 with
                                      | Alt (0, v) ->
                                          `Meth_type (
                                            trans_method_type (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Choice_simple_type (
                                            (match v with
                                            | Alt (0, v) ->
                                                `Simple_type (
                                                  trans_simple_type (Run.matcher_token v)
                                                )
                                            | Alt (1, v) ->
                                                `Exte (
                                                  trans_extension (Run.matcher_token v)
                                                )
                                            | _ -> assert false
                                            )
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                            ,
                            Run.opt
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      Run.opt
                                        (fun v -> Run.trans_token (Run.matcher_token v))
                                        v1
                                    )
                                | _ -> assert false
                                )
                              )
                              v2
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `DOTDOT (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_open_module ((kind, body) : mt) : CST.open_module =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Module_exp (
                  trans_module_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_or_binding_pattern ((kind, body) : mt) : CST.or_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_binding_pattern_ext (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_binding_pattern_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_or_pattern ((kind, body) : mt) : CST.or_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pattern_ext (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pattern_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_package_expression ((kind, body) : mt) : CST.package_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Module_exp (
                  trans_module_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_module_typed (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_package_pattern ((kind, body) : mt) : CST.package_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Capi_id (
                  trans_capitalized_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `X__ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_module_typed (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_package_type ((kind, body) : mt) : CST.package_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Module_type (
                  trans_module_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_packed_module ((kind, body) : mt) : CST.packed_module =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_module_typed (Run.matcher_token v))
              v3
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Module_type (
                            trans_module_type (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exte (
                            trans_extension (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter ((kind, body) : mt) : CST.parameter =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Param_ (
            trans_parameter_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Paren_abst_type (
            trans_parenthesized_abstract_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameter_ ((kind, body) : mt) : CST.parameter_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_pat_ext (
            trans_simple_pattern_ext (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_TILDE_id (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `TILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `QMARK (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_identifier (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Label_imm_tok_colon_simple_pat_ext (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_label (Run.matcher_token v0),
                  trans_imm_tok_colon (Run.matcher_token v1),
                  trans_simple_pattern_ext (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Choice_TILDE_LPAR_id_opt_typed_opt_EQ_seq_exp_ext_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `TILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `QMARK (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_identifier (Run.matcher_token v2),
                  Run.opt
                    (fun v -> trans_typed (Run.matcher_token v))
                    v3
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_sequence_expression_ext (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v4
                  ,
                  Run.trans_token (Run.matcher_token v5)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Label_imm_tok_colon_LPAR_pat_ext_opt_typed_EQ_seq_exp_ext_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
                (
                  trans_label (Run.matcher_token v0),
                  trans_imm_tok_colon (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2),
                  trans_pattern_ext (Run.matcher_token v3),
                  Run.opt
                    (fun v -> trans_typed (Run.matcher_token v))
                    v4
                  ,
                  Run.trans_token (Run.matcher_token v5),
                  trans_sequence_expression_ext (Run.matcher_token v6),
                  Run.trans_token (Run.matcher_token v7)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_binding_pattern ((kind, body) : mt) : CST.parenthesized_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_binding_pattern_ext (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_class_expression ((kind, body) : mt) : CST.parenthesized_class_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_class_expression_ext (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Begin_opt_attr_seq_exp_ext_end (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_attribute (Run.matcher_token v))
                    v1
                  ,
                  trans_sequence_expression_ext (Run.matcher_token v2),
                  Run.trans_token (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `LPAR_seq_exp_ext_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_sequence_expression_ext (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_module_expression ((kind, body) : mt) : CST.parenthesized_module_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Module_exp (
                  trans_module_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_module_type ((kind, body) : mt) : CST.parenthesized_module_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Module_type (
                  trans_module_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_pattern ((kind, body) : mt) : CST.parenthesized_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_pattern_ext (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_type ((kind, body) : mt) : CST.parenthesized_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ext (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pattern ((kind, body) : mt) : CST.pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_pat (
            trans_simple_pattern (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Alias_pat (
            trans_alias_pattern (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Or_pat (
            trans_or_pattern (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Cons_pat_4ec55c1 (
            trans_constructor_pattern (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Tag_pat (
            trans_tag_pattern (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Tuple_pat (
            trans_tuple_pattern (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Cons_pat_9b4e481 (
            trans_cons_pattern (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Range_pat (
            trans_range_pattern (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Lazy_pat (
            trans_lazy_pattern (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Exc_pat (
            trans_exception_pattern (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pattern_ext ((kind, body) : mt) : CST.pattern_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat (
            trans_pattern (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_polymorphic_type ((kind, body) : mt) : CST.polymorphic_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Poly_type_ (
            trans_polymorphic_type_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Type_ext (
            trans_type_ext (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_polymorphic_type_ ((kind, body) : mt) : CST.polymorphic_type_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Rep1_type_var (
                  Run.repeat1
                    (fun v -> trans_type_variable (Run.matcher_token v))
                    v
                )
            | Alt (1, v) ->
                `Abst_type (
                  trans_abstract_type (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_type_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_polymorphic_typed ((kind, body) : mt) : CST.polymorphic_typed =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_polymorphic_type (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_polymorphic_variant_type ((kind, body) : mt) : CST.polymorphic_variant_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `LBRACK_tag_spec_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_tag_specification (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LBRACK_opt_tag_spec_BAR_tag_spec_rep_BAR_tag_spec_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4; v5] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_tag_spec (Run.matcher_token v))
                          v1
                        ,
                        Run.trans_token (Run.matcher_token v2),
                        trans_tag_spec (Run.matcher_token v3),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_tag_spec (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v4
                        ,
                        Run.trans_token (Run.matcher_token v5)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `LBRACKGT_opt_BAR_opt_tag_spec_rep_BAR_tag_spec_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_tag_spec (Run.matcher_token v0),
                                  Run.repeat
                                    (fun v ->
                                      (match v with
                                      | Seq [v0; v1] ->
                                          (
                                            Run.trans_token (Run.matcher_token v0),
                                            trans_tag_spec (Run.matcher_token v1)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                    v1
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                        ,
                        Run.trans_token (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (3, v) ->
                `LBRACKLT_opt_BAR_tag_spec_rep_BAR_tag_spec_opt_GT_rep1_tag_RBRACK (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4; v5] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v1
                        ,
                        trans_tag_spec (Run.matcher_token v2),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  trans_tag_spec (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v3
                        ,
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  Run.repeat1
                                    (fun v -> trans_tag (Run.matcher_token v))
                                    v1
                                )
                            | _ -> assert false
                            )
                          )
                          v4
                        ,
                        Run.trans_token (Run.matcher_token v5)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_prefix_expression ((kind, body) : mt) : CST.prefix_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_prefix_operator (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_product_expression ((kind, body) : mt) : CST.product_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_quoted_item_extension ((kind, body) : mt) : CST.quoted_item_extension =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_attribute_id (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_pat_3d340f6 (Run.matcher_token v))
              v2
            ,
            trans_left_quoted_string_delimiter (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_quoted_string_content (Run.matcher_token v))
              v4
            ,
            trans_right_quoted_string_delimiter (Run.matcher_token v5),
            Run.trans_token (Run.matcher_token v6),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v7
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_record_binding_pattern ((kind, body) : mt) : CST.record_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_field_binding_pattern (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_field_binding_pattern (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_record_declaration ((kind, body) : mt) : CST.record_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_field_declaration (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_field_declaration (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_record_expression ((kind, body) : mt) : CST.record_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Simple_exp (
                            trans_simple_expression (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Exte (
                            trans_extension (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_field_expression (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_field_expression (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_record_pattern ((kind, body) : mt) : CST.record_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_field_pattern (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_field_pattern (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sequence_expression ((kind, body) : mt) : CST.sequence_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v -> trans_attribute (Run.matcher_token v))
                        v0
                      ,
                      trans_sequence_expression_ext (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sequence_expression_ ((kind, body) : mt) : CST.sequence_expression_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp (
            trans_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Seq_exp (
            trans_sequence_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sequence_expression_ext ((kind, body) : mt) : CST.sequence_expression_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Seq_exp_ (
            trans_sequence_expression_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_set_expression ((kind, body) : mt) : CST.set_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Field_get_exp (
                  trans_field_get_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Array_get_exp (
                  trans_array_get_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Str_get_exp (
                  trans_string_get_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Biga_get_exp (
                  trans_bigarray_get_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sign_expression ((kind, body) : mt) : CST.sign_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_sign_operator (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_signature ((kind, body) : mt) : CST.signature =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep1_SEMISEMI (
            Run.repeat1
              (fun v -> Run.trans_token (Run.matcher_token v))
              v
          )
      | Alt (1, v) ->
          `Rep1_rep_SEMISEMI_sign_item_ext_rep_SEMISEMI (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.repeat1
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.repeat
                              (fun v -> Run.trans_token (Run.matcher_token v))
                              v0
                            ,
                            trans_signature_item_ext (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v0
                  ,
                  Run.repeat
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_signature_ ((kind, body) : mt) : CST.signature_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_signature (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_signature_item ((kind, body) : mt) : CST.signature_item =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Value_spec (
            trans_value_specification (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_external_ (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Type_defi (
            trans_type_definition (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Exc_defi (
            trans_exception_definition (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Module_defi (
            trans_module_definition (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Module_type_defi (
            trans_module_type_definition (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Open_module (
            trans_open_module (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Incl_module_type (
            trans_include_module_type (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Class_defi (
            trans_class_definition (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Class_type_defi (
            trans_class_type_definition (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Floa_attr (
            trans_floating_attribute (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_signature_item_ext ((kind, body) : mt) : CST.signature_item_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Sign_item (
            trans_signature_item (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Item_exte (
            trans_item_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_class_expression ((kind, body) : mt) : CST.simple_class_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Class_path (
            trans_class_path (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Inst_class (
            trans_instantiated_class (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Obj_exp (
            trans_object_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Typed_class_exp (
            trans_typed_class_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Paren_class_exp (
            trans_parenthesized_class_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_class_type ((kind, body) : mt) : CST.simple_class_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Class_type_path (
            trans_class_type_path (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Inst_class_type (
            trans_instantiated_class_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Class_body_type (
            trans_class_body_type (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Let_open_class_type (
            trans_let_open_class_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_class_type_ext ((kind, body) : mt) : CST.simple_class_type_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_class_type (
            trans_simple_class_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_expression ((kind, body) : mt) : CST.simple_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Value_path (
            trans_value_path (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Cst (
            trans_constant (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Typed_exp (
            trans_typed_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Cons_path (
            trans_constructor_path (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Tag (
            trans_tag (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `List_exp (
            trans_list_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Array_exp (
            trans_array_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Record_exp (
            trans_record_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Prefix_exp (
            trans_prefix_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Hash_exp (
            trans_hash_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Field_get_exp (
            trans_field_get_expression (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Array_get_exp (
            trans_array_get_expression (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Str_get_exp (
            trans_string_get_expression (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Biga_get_exp (
            trans_bigarray_get_expression (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Coer_exp (
            trans_coercion_expression (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Local_open_exp (
            trans_local_open_expression (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Pack_exp (
            trans_package_expression (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `New_exp (
            trans_new_expression (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Obj_copy_exp (
            trans_object_copy_expression (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Meth_invo (
            trans_method_invocation (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `Ocam_value (
            trans_ocamlyacc_value (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_module_expression ((kind, body) : mt) : CST.simple_module_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Typed_module_exp (
            trans_typed_module_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Paren_module_exp (
            trans_parenthesized_module_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Packed_module (
            trans_packed_module (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_module_expression_ext ((kind, body) : mt) : CST.simple_module_expression_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_module_exp (
            trans_simple_module_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_pattern ((kind, body) : mt) : CST.simple_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Value_pat (
            trans_value_pattern (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Signed_cst (
            trans_signed_constant (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Typed_pat (
            trans_typed_pattern (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Cons_path (
            trans_constructor_path (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Tag (
            trans_tag (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Poly_vari_pat (
            trans_polymorphic_variant_pattern (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Record_pat (
            trans_record_pattern (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `List_pat (
            trans_list_pattern (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Array_pat (
            trans_array_pattern (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Local_open_pat (
            trans_local_open_pattern (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Pack_pat (
            trans_package_pattern (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Paren_pat (
            trans_parenthesized_pattern (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_pattern_ext ((kind, body) : mt) : CST.simple_pattern_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_pat (
            trans_simple_pattern (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_type ((kind, body) : mt) : CST.simple_type =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Type_var (
            trans_type_variable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Type_cons_path (
            trans_type_constructor_path (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Cons_type (
            trans_constructed_type (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Poly_vari_type (
            trans_polymorphic_variant_type (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Pack_type (
            trans_package_type (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Hash_type (
            trans_hash_type (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Obj_type (
            trans_object_type (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Paren_type (
            trans_parenthesized_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_typed ((kind, body) : mt) : CST.simple_typed =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_string_get_expression ((kind, body) : mt) : CST.string_get_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Simple_exp (
                  trans_simple_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                trans_indexing_operator_path (Run.matcher_token v)
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            trans_sequence_expression_ext (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_structure ((kind, body) : mt) : CST.structure =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rep1_SEMISEMI (
            Run.repeat1
              (fun v -> Run.trans_token (Run.matcher_token v))
              v
          )
      | Alt (1, v) ->
          `Rep_SEMISEMI_choice_stru_item_ext_rep_choice_rep_SEMISEMI_choice_stru_item_ext_rep_SEMISEMI (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.repeat
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `Stru_item_ext (
                        trans_structure_item_ext (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Topl_dire (
                        trans_toplevel_directive (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Exp_item (
                        trans_expression_item (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Rep_SEMISEMI_choice_stru_item_ext (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat
                                    (fun v -> Run.trans_token (Run.matcher_token v))
                                    v0
                                  ,
                                  (match v1 with
                                  | Alt (0, v) ->
                                      `Stru_item_ext (
                                        trans_structure_item_ext (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Topl_dire (
                                        trans_toplevel_directive (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Rep1_SEMISEMI_exp_item (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> Run.trans_token (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_expression_item (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                  ,
                  Run.repeat
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v3
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_structure_ ((kind, body) : mt) : CST.structure_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_structure (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_structure_item ((kind, body) : mt) : CST.structure_item =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Value_defi (
            trans_value_definition (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_external_ (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Type_defi (
            trans_type_definition (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Exc_defi (
            trans_exception_definition (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Module_defi (
            trans_module_definition (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Module_type_defi (
            trans_module_type_definition (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Open_module (
            trans_open_module (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Incl_module (
            trans_include_module (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Class_defi (
            trans_class_definition (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Class_type_defi (
            trans_class_type_definition (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Floa_attr (
            trans_floating_attribute (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_structure_item_ext ((kind, body) : mt) : CST.structure_item_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Stru_item (
            trans_structure_item (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Item_exte (
            trans_item_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tag_binding_pattern ((kind, body) : mt) : CST.tag_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_tag (Run.matcher_token v0),
            trans_binding_pattern_ext (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tag_pattern ((kind, body) : mt) : CST.tag_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_tag (Run.matcher_token v0),
            trans_pattern_ext (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tag_spec ((kind, body) : mt) : CST.tag_spec =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Type_ext (
            trans_type_ext (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Tag_spec (
            trans_tag_specification (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tag_specification ((kind, body) : mt) : CST.tag_specification =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_tag (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v1
                      ,
                      trans_type_ext (Run.matcher_token v2),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_type_ext (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v3
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_then_clause ((kind, body) : mt) : CST.then_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_expression ((kind, body) : mt) : CST.try_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_sequence_expression_ext (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_match_cases (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_binding_pattern ((kind, body) : mt) : CST.tuple_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_binding_pattern_ext (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_binding_pattern_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_pattern ((kind, body) : mt) : CST.tuple_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pattern_ext (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pattern_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_type ((kind, body) : mt) : CST.tuple_type =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_tuple_type_ext (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Simple_type (
                  trans_simple_type (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_type_ ((kind, body) : mt) : CST.tuple_type_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_type (
            trans_simple_type (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Tuple_type (
            trans_tuple_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_type_ext ((kind, body) : mt) : CST.tuple_type_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tuple_type_ (
            trans_tuple_type_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_ ((kind, body) : mt) : CST.type_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tuple_type_ (
            trans_tuple_type_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Func_type (
            trans_function_type (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Alia_type (
            trans_aliased_type (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_binding ((kind, body) : mt) : CST.type_binding =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_type_params (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Id_opt_type_equa_opt_EQ_opt_priv_choice_vari_decl_rep_type_cons (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        trans_identifier (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_type_equation (Run.matcher_token v))
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  Run.trans_token (Run.matcher_token v0),
                                  Run.opt
                                    (fun v -> Run.trans_token (Run.matcher_token v))
                                    v1
                                  ,
                                  (match v2 with
                                  | Alt (0, v) ->
                                      `Vari_decl (
                                        trans_variant_declaration (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Record_decl (
                                        trans_record_declaration (Run.matcher_token v)
                                      )
                                  | Alt (2, v) ->
                                      `DOTDOT (
                                        Run.trans_token (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                        ,
                        Run.repeat
                          (fun v -> trans_type_constraint (Run.matcher_token v))
                          v3
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Type_cons_path_PLUSEQ_opt_priv_vari_decl (
                  (match v with
                  | Seq [v0; v1; v2; v3] ->
                      (
                        trans_type_constructor_path (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v2
                        ,
                        trans_variant_declaration (Run.matcher_token v3)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_constraint ((kind, body) : mt) : CST.type_constraint =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ext (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_type_ext (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_definition ((kind, body) : mt) : CST.type_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            trans_type_binding (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_type_binding (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_equation ((kind, body) : mt) : CST.type_equation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `COLONEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_type_ext (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_ext ((kind, body) : mt) : CST.type_ext =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Type (
            trans_type_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exte (
            trans_extension (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_type_parameter_constraint ((kind, body) : mt) : CST.type_parameter_constraint =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ext (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_type_ext (Run.matcher_token v3),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typed ((kind, body) : mt) : CST.typed =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_type_ext (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typed_binding_pattern ((kind, body) : mt) : CST.typed_binding_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_binding_pattern_ext (Run.matcher_token v1),
            trans_typed (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typed_class_expression ((kind, body) : mt) : CST.typed_class_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_class_expression_ext (Run.matcher_token v1),
            trans_class_typed (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typed_expression ((kind, body) : mt) : CST.typed_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_sequence_expression_ext (Run.matcher_token v1),
            trans_typed (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typed_label ((kind, body) : mt) : CST.typed_label =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_identifier (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_type_ext (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typed_module_expression ((kind, body) : mt) : CST.typed_module_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Module_exp (
                  trans_module_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exte (
                  trans_extension (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_module_typed (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typed_pattern ((kind, body) : mt) : CST.typed_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_pattern_ext (Run.matcher_token v1),
            trans_typed (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_value_definition ((kind, body) : mt) : CST.value_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Let_opt_attr_opt_rec (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_attribute (Run.matcher_token v))
                          v1
                        ,
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Let_op (
                  trans_let_operator (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_let_binding (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `And (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `And_op (
                            trans_and_operator (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      trans_let_binding (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_value_specification ((kind, body) : mt) : CST.value_specification =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_value_name (Run.matcher_token v2),
            trans_typed (Run.matcher_token v3),
            Run.repeat
              (fun v -> trans_item_attribute (Run.matcher_token v))
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variant_declaration ((kind, body) : mt) : CST.variant_declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `BAR_opt_cons_decl_rep_BAR_cons_decl (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_constructor_declaration (Run.matcher_token v0),
                            Run.repeat
                              (fun v ->
                                (match v with
                                | Seq [v0; v1] ->
                                    (
                                      Run.trans_token (Run.matcher_token v0),
                                      trans_constructor_declaration (Run.matcher_token v1)
                                    )
                                | _ -> assert false
                                )
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Cons_decl_rep_BAR_cons_decl (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_constructor_declaration (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_constructor_declaration (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_expression ((kind, body) : mt) : CST.while_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_attribute (Run.matcher_token v))
              v1
            ,
            trans_sequence_expression_ext (Run.matcher_token v2),
            trans_do_clause (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_compilation_unit ((kind, body) : mt) : CST.compilation_unit =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_shebang (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> trans_structure (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false







let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let root_node = Run.remove_extras ~extras orig_root_node in
  let matched_tree = Run.match_tree children_regexps src root_node in
  let opt_program = Option.map trans_compilation_unit matched_tree in
  Parsing_result.create src opt_program errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

