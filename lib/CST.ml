(* Generated by ocaml-tree-sitter. *)
(*
   ocaml grammar

   entrypoint: compilation_unit
*)

open! Sexplib.Conv
open Tree_sitter_run

type pat_d43393f = Token.t (* pattern "[^\\\\']" *)

type concat_operator = Token.t

type let_operator = Token.t

type conversion_specification = Token.t

type or_operator = Token.t

type tok_choice_plus_rep1_pat_2ed1ddf = Token.t

type tok_choice_pat_4349e4b = Token.t

type boolean = [
    `True of Token.t (* "true" *)
  | `False of Token.t (* "false" *)
]

type pat_a1391b9 = Token.t (* pattern \. *)

type pat_3bf11d1 = Token.t (* pattern \\x[0-9A-Fa-f][0-9A-Fa-f] *)

type pat_9465c8b = Token.t (* pattern \\\n[\t ]* *)

type pat_dece469 = Token.t (* pattern [+-] *)

type pat_86b875b = Token.t (* pattern \\[0-9][0-9][0-9] *)

type pat_3d340f6 = Token.t (* pattern \s+ *)

type and_operator = Token.t

type capitalized_identifier = Token.t (* pattern "[A-Z][a-zA-Z0-9_']*" *)

type shebang = Token.t (* pattern #!.* *)

type hash_operator = Token.t

type pat_833344d = Token.t (* pattern ` *)

type mult_operator = Token.t

type pat_3590cb8 = Token.t (* pattern "'" *)

type pretty_printing_indication =
  Token.t (* pattern @([\[\], ;.{}?]|\\n|<[0-9]+>) *)

type assign_operator = Token.t (* pattern := *)

type anon_choice_muta_d43fe41 = [
    `Muta of Token.t (* "mutable" *)
  | `Virt of Token.t (* "virtual" *)
]

type match_operator = Token.t

type imm_tok_pat_dcdac4f = Token.t (* pattern \s *)

type pat_21333c0 = Token.t (* pattern \\o[0-3][0-7][0-7] *)

type unit_ = [
    `LPAR_RPAR of (Token.t (* "(" *) * Token.t (* ")" *))
  | `Begin_end of (Token.t (* "begin" *) * Token.t (* "end" *))
]

type number = Token.t

type null = Token.t

type anon_choice_TILDE_72781e5 = [
    `TILDE of Token.t (* "~" *)
  | `QMARK of Token.t (* "?" *)
]

type imm_tok_colon = Token.t (* ":" *)

type ocamlyacc_value = Token.t (* pattern \$[0-9]+ *)

type prefix_operator = Token.t

type pat_714c625 = Token.t (* pattern [^%@|]+|%|@|\| *)

type pat_79c7248 = Token.t (* pattern [+-]\. *)

type let_and_operator = Token.t

type pat_60fc52b = Token.t (* pattern "\\\\[\\\\\"'ntbr ]" *)

type pat_01abfc7 = Token.t (* pattern # *)

type left_quoted_string_delimiter = Token.t

type pat_6cdf4be = Token.t (* pattern \\u\{[0-9A-Fa-f]+\} *)

type anon_choice_EQ_4ccabd6 = [
    `EQ of Token.t (* "=" *)
  | `COLONEQ of Token.t (* ":=" *)
]

type pat_6c51254 = Token.t (* pattern \[@ *)

type identifier = Token.t (* pattern "(\\\\#)?[a-z_][a-zA-Z0-9_']*" *)

type right_quoted_string_delimiter = Token.t

type indexing_operator = Token.t

type rel_operator = Token.t

type anon_choice_priv_c7cc539 = [
    `Priv of Token.t (* "private" *)
  | `Virt of Token.t (* "virtual" *)
]

type imm_tok_pat_6c51254 = Token.t (* pattern \[@ *)

type pat_19aaf34 = Token.t (* pattern "[^\\\\\"%@]+|%|@" *)

type pow_operator = Token.t

type add_operator = [
    `Pat_dece469 of pat_dece469
  | `Pat_79c7248 of pat_79c7248
  | `Tok_choice_plus_rep1_pat_2ed1ddf of tok_choice_plus_rep1_pat_2ed1ddf
]

type sign_operator = [
    `Pat_dece469 of pat_dece469
  | `Pat_79c7248 of pat_79c7248
]

type escape_sequence = [
    `Pat_60fc52b of pat_60fc52b
  | `Pat_86b875b of pat_86b875b
  | `Pat_3bf11d1 of pat_3bf11d1
  | `Pat_21333c0 of pat_21333c0
]

type quoted_string_content =
  [
      `Imm_tok_pat_dcdac4f of imm_tok_pat_dcdac4f
    | `Imm_tok_pat_6c51254 of imm_tok_pat_6c51254
    | `Pat_714c625 of pat_714c625
    | `Null of null (*tok*)
    | `Conv_spec of conversion_specification (*tok*)
    | `Pretty_prin_indi of pretty_printing_indication (*tok*)
  ]
    list (* one or more *)

type anon_choice_module_name_7ad5569 = [
    `Capi_id of capitalized_identifier (*tok*)
  | `X__ of Token.t (* "_" *)
]

type module_path = [
    `Capi_id of capitalized_identifier (*tok*)
  | `Module_path_DOT_capi_id of (
        module_path * Token.t (* "." *) * capitalized_identifier (*tok*)
    )
]

type constructor_name = [
    `Capi_id of capitalized_identifier (*tok*)
  | `LPAR_COLONCOLON_RPAR of (
        Token.t (* "(" *) * Token.t (* "::" *) * Token.t (* ")" *)
    )
]

type extended_module_path = [
    `Choice_capi_id of [
        `Capi_id of capitalized_identifier (*tok*)
      | `Exte_module_path_DOT_capi_id of (
            extended_module_path * Token.t (* "." *)
          * capitalized_identifier (*tok*)
        )
    ]
  | `Exte_module_path_LPAR_exte_module_path_RPAR of (
        extended_module_path * Token.t (* "(" *) * extended_module_path
      * Token.t (* ")" *)
    )
]

type infix_operator = [
    `Pow_op of pow_operator (*tok*)
  | `Mult_op of mult_operator (*tok*)
  | `Add_op of add_operator
  | `Concat_op of concat_operator (*tok*)
  | `Rel_op of rel_operator (*tok*)
  | `And_op of and_operator (*tok*)
  | `Or_op of or_operator (*tok*)
  | `Assign_op of assign_operator (*tok*)
]

type character_content = [
    `Pat_d43393f of pat_d43393f
  | `Null of null (*tok*)
  | `Esc_seq of escape_sequence
]

type string_content =
  [
      `Imm_tok_pat_dcdac4f of imm_tok_pat_dcdac4f
    | `Imm_tok_pat_6c51254 of imm_tok_pat_6c51254
    | `Pat_19aaf34 of pat_19aaf34
    | `Null of null (*tok*)
    | `Esc_seq of escape_sequence
    | `Pat_6cdf4be of pat_6cdf4be
    | `Pat_9465c8b of pat_9465c8b
    | `Conv_spec of conversion_specification (*tok*)
    | `Pretty_prin_indi of pretty_printing_indication (*tok*)
  ]
    list (* one or more *)

type module_type_name = [
    `Capi_id of capitalized_identifier (*tok*)
  | `Id of identifier (*tok*)
]

type abstract_type = (
    Token.t (* "type" *)
  * identifier (*tok*) list (* one or more *)
)

type anon_choice_field_name_cbd841f = [
    `Id of identifier (*tok*)
  | `Capi_id of capitalized_identifier (*tok*)
]

type quoted_string = (
    left_quoted_string_delimiter (*tok*)
  * quoted_string_content option
  * right_quoted_string_delimiter (*tok*)
)

type indexing_operator_path = [
    `Inde_op of indexing_operator (*tok*)
  | `Module_path_DOT_inde_op of (
        module_path * Token.t (* "." *) * indexing_operator (*tok*)
    )
]

type field_path = [
    `Id of identifier (*tok*)
  | `Module_path_DOT_id of (
        module_path * Token.t (* "." *) * identifier (*tok*)
    )
]

type class_path = [
    `Id of identifier (*tok*)
  | `Module_path_DOT_id of (
        module_path * Token.t (* "." *) * identifier (*tok*)
    )
]

type constructor_path = [
    `Cons_name of constructor_name
  | `Module_path_DOT_cons_name of (
        module_path * Token.t (* "." *) * constructor_name
    )
]

type type_constructor_path = [
    `Id of identifier (*tok*)
  | `Exte_module_path_DOT_id of (
        extended_module_path * Token.t (* "." *) * identifier (*tok*)
    )
]

type class_type_path = [
    `Id of identifier (*tok*)
  | `Exte_module_path_DOT_id of (
        extended_module_path * Token.t (* "." *) * identifier (*tok*)
    )
]

type parenthesized_operator = (
    Token.t (* "(" *)
  * [
        `Prefix_op of prefix_operator (*tok*)
      | `Infix_op of infix_operator
      | `Hash_op of hash_operator (*tok*)
      | `DOT_inde_op_choice_LPAR_opt_SEMI_DOTDOT_RPAR_opt_LTDASH of (
            Token.t (* "." *)
          * indexing_operator (*tok*)
          * [
                `LPAR_opt_SEMI_DOTDOT_RPAR of (
                    Token.t (* "(" *)
                  * (Token.t (* ";" *) * Token.t (* ".." *)) option
                  * Token.t (* ")" *)
                )
              | `LBRACK_opt_SEMI_DOTDOT_RBRACK of (
                    Token.t (* "[" *)
                  * (Token.t (* ";" *) * Token.t (* ".." *)) option
                  * Token.t (* "]" *)
                )
              | `LCURL_opt_SEMI_DOTDOT_RCURL of (
                    Token.t (* "{" *)
                  * (Token.t (* ";" *) * Token.t (* ".." *)) option
                  * Token.t (* "}" *)
                )
            ]
          * Token.t (* "<-" *) option
        )
      | `Let_op of let_operator (*tok*)
      | `Let_and_op of let_and_operator (*tok*)
      | `Match_op of match_operator (*tok*)
    ]
  * Token.t (* ")" *)
)

type string_ = (
    Token.t (* "\"" *)
  * string_content option
  * Token.t (* "\"" *)
)

type module_type_path = [
    `Choice_capi_id of module_type_name
  | `Exte_module_path_DOT_choice_capi_id of (
        extended_module_path * Token.t (* "." *) * module_type_name
    )
]

type parenthesized_abstract_type = (
    Token.t (* "(" *) * abstract_type * Token.t (* ")" *)
)

type attribute_id = (
    anon_choice_field_name_cbd841f
  * (pat_a1391b9 * anon_choice_field_name_cbd841f) list (* zero or more *)
)

type directive = (pat_01abfc7 * anon_choice_field_name_cbd841f)

type tag = (pat_833344d * anon_choice_field_name_cbd841f)

type type_variable = (pat_3590cb8 * anon_choice_field_name_cbd841f)

type polymorphic_variant_pattern = (
    Token.t (* "#" *) * type_constructor_path
)

type value_name = [
    `Id of identifier (*tok*)
  | `Paren_op of parenthesized_operator
]

type value_pattern = [
    `Simple_value_pat of identifier (*tok*)
  | `Paren_op of parenthesized_operator
]

type attribute = (Token.t (* "%" *) * attribute_id)

type type_param = (
    [
        `PLUS_opt_BANG of (Token.t (* "+" *) * Token.t (* "!" *) option)
      | `DASH_opt_BANG of (Token.t (* "-" *) * Token.t (* "!" *) option)
      | `BANG_opt_choice_PLUS of (
            Token.t (* "!" *)
          * [ `PLUS of Token.t (* "+" *) | `DASH of Token.t (* "-" *) ]
              option
        )
    ]
      option
  * [ `Type_var of type_variable | `X__ of Token.t (* "_" *) ]
)

type constant = [
    `Num of number (*tok*)
  | `Char of (Token.t (* "'" *) * character_content * Token.t (* "'" *))
  | `Str of string_
  | `Quoted_str_ of (Token.t (* "{" *) * quoted_string * Token.t (* "}" *))
  | `Bool of boolean
  | `Unit of unit_
]

type value_path = [
    `Value_name of value_name
  | `Module_path_DOT_value_name of (
        module_path * Token.t (* "." *) * value_name
    )
]

type type_params = [
    `Type_param of type_param
  | `LPAR_type_param_rep_COMMA_type_param_RPAR of (
        Token.t (* "(" *)
      * type_param
      * (Token.t (* "," *) * type_param) list (* zero or more *)
      * Token.t (* ")" *)
    )
]

type anon_LBRACK_type_param_rep_COMMA_type_param_RBRACK_cea5434 = (
    Token.t (* "[" *)
  * type_param
  * (Token.t (* "," *) * type_param) list (* zero or more *)
  * Token.t (* "]" *)
)

type signed_constant = [
    `Cst of constant
  | `Signed_num of (pat_dece469 * tok_choice_pat_4349e4b)
]

type toplevel_directive = (
    directive
  * [
        `Cst of constant
      | `Value_path of value_path
      | `Module_path of module_path
    ]
      option
)

type range_pattern = (signed_constant * Token.t (* ".." *) * signed_constant)

type anon_bind_pat_rep_SEMI_bind_pat_opt_SEMI_ddad36f = (
    binding_pattern
  * (Token.t (* ";" *) * binding_pattern) list (* zero or more *)
  * Token.t (* ";" *) option
)

and anon_choice_cons_type_771aabb = [
    `Cons_type of (
        Token.t (* "type" *)
      * type_params option
      * type_constructor_path
      * type_equation
      * type_constraint list (* zero or more *)
    )
  | `Cons_module of (
        Token.t (* "module" *) * module_path * anon_choice_EQ_4ccabd6
      * extended_module_path
    )
  | `Cons_module_type of (
        Token.t (* "module" *) * Token.t (* "type" *) * module_type_path
      * anon_choice_EQ_4ccabd6 * module_type
    )
]

and anon_choice_meth_type_d8c4bdc = [
    `Meth_type of (identifier (*tok*) * polymorphic_typed)
  | `Simple_type of simple_type
]

and anon_choice_simple_type_9a0619a = [
    `Simple_type of simple_type
  | `LPAR_type_rep_COMMA_type_RPAR of (
        Token.t (* "(" *)
      * type_
      * (Token.t (* "," *) * type_) list (* zero or more *)
      * Token.t (* ")" *)
    )
]

and anon_cons_decl_rep_BAR_cons_decl_fc0ccc5 = (
    constructor_declaration
  * (Token.t (* "|" *) * constructor_declaration) list (* zero or more *)
)

and anon_exp_rep_SEMI_exp_opt_SEMI_72c923c = (
    expression
  * (Token.t (* ";" *) * expression) list (* zero or more *)
  * Token.t (* ";" *) option
)

and anon_pat_rep_SEMI_pat_opt_SEMI_35217e1 = (
    pattern
  * (Token.t (* ";" *) * pattern) list (* zero or more *)
  * Token.t (* ";" *) option
)

and argument = [
    `Simple_exp of simple_expression
  | `Labe_arg of labeled_argument
]

and array_binding_pattern = (
    Token.t (* "[|" *)
  * anon_bind_pat_rep_SEMI_bind_pat_opt_SEMI_ddad36f option
  * Token.t (* "|]" *)
)

and array_expression = (
    Token.t (* "[|" *)
  * anon_exp_rep_SEMI_exp_opt_SEMI_72c923c option
  * Token.t (* "|]" *)
)

and array_get_expression = (
    simple_expression
  * Token.t (* "." *)
  * indexing_operator_path option
  * Token.t (* "(" *)
  * sequence_expression
  * Token.t (* ")" *)
)

and array_pattern = (
    Token.t (* "[|" *)
  * anon_pat_rep_SEMI_pat_opt_SEMI_35217e1 option
  * Token.t (* "|]" *)
)

and attribute_payload = [
    `Stru of structure
  | `COLON_opt_choice_type of (
        Token.t (* ":" *)
      * [ `Type of type_ | `Sign of signature ] option
    )
  | `QMARK_pat_opt_guard of (Token.t (* "?" *) * pattern * guard option)
]

and bigarray_get_expression = (
    simple_expression
  * Token.t (* "." *)
  * indexing_operator_path option
  * Token.t (* "{" *)
  * sequence_expression
  * Token.t (* "}" *)
)

and binding_pattern = [
    `Value_name of value_name
  | `Signed_cst of signed_constant
  | `Typed_bind_pat of (
        Token.t (* "(" *) * binding_pattern * typed * Token.t (* ")" *)
    )
  | `Cons_path of constructor_path
  | `Tag of tag
  | `Poly_vari_pat of polymorphic_variant_pattern
  | `Record_bind_pat of record_binding_pattern
  | `List_bind_pat of list_binding_pattern
  | `Array_bind_pat of array_binding_pattern
  | `Local_open_bind_pat of (
        module_path
      * Token.t (* "." *)
      * [
            `LPAR_opt_bind_pat_RPAR of (
                Token.t (* "(" *)
              * binding_pattern option
              * Token.t (* ")" *)
            )
          | `List_bind_pat of list_binding_pattern
          | `Array_bind_pat of array_binding_pattern
          | `Record_bind_pat of record_binding_pattern
        ]
    )
  | `Pack_pat of package_pattern
  | `Paren_bind_pat of (
        Token.t (* "(" *) * binding_pattern * Token.t (* ")" *)
    )
  | `Alias_bind_pat of (binding_pattern * Token.t (* "as" *) * value_name)
  | `Or_bind_pat of (binding_pattern * Token.t (* "|" *) * binding_pattern)
  | `Cons_bind_pat_1ca6430 of (constructor_path * binding_pattern)
  | `Tag_bind_pat of (tag * binding_pattern)
  | `Tuple_bind_pat of (
        binding_pattern * Token.t (* "," *) * binding_pattern
    )
  | `Cons_bind_pat_f2d0ae9 of (
        binding_pattern * Token.t (* "::" *) * binding_pattern
    )
  | `Range_pat of range_pattern
  | `Lazy_bind_pat of (
        Token.t (* "lazy" *)
      * attribute option
      * binding_pattern
    )
  | `Choice_exte of extension_
]

and class_binding = (
    Token.t (* "virtual" *) option
  * anon_LBRACK_type_param_rep_COMMA_type_param_RBRACK_cea5434 option
  * identifier (*tok*)
  * parameter_ list (* zero or more *)
  * class_typed option
  * (Token.t (* "=" *) * class_expression) option
  * item_attribute list (* zero or more *)
)

and class_definition = (
    Token.t (* "class" *)
  * attribute option
  * class_binding
  * (Token.t (* "and" *) * class_binding) list (* zero or more *)
)

and class_expression = [
    `Simple_class_exp of simple_class_expression
  | `Class_func of (
        Token.t (* "fun" *)
      * parameter_ list (* one or more *)
      * Token.t (* "->" *)
      * class_expression
    )
  | `Class_app of (simple_class_expression * argument list (* one or more *))
  | `Let_class_exp of (
        value_definition * Token.t (* "in" *) * class_expression
    )
  | `Let_open_class_exp of (
        Token.t (* "let" *) * open_module * Token.t (* "in" *)
      * class_expression
    )
]

and class_field = [
    `Inhe_defi of (
        Token.t (* "inherit" *)
      * Token.t (* "!" *) option
      * class_expression
      * (Token.t (* "as" *) * value_pattern) option
      * item_attribute list (* zero or more *)
    )
  | `Inst_var_defi of (
        Token.t (* "val" *)
      * Token.t (* "!" *) option
      * anon_choice_muta_d43fe41 list (* zero or more *)
      * identifier (*tok*)
      * typed option
      * (Token.t (* ":>" *) * type_) option
      * (Token.t (* "=" *) * sequence_expression) option
      * item_attribute list (* zero or more *)
    )
  | `Meth_defi of (
        Token.t (* "method" *)
      * Token.t (* "!" *) option
      * anon_choice_priv_c7cc539 list (* zero or more *)
      * identifier (*tok*)
      * parameter_ list (* zero or more *)
      * polymorphic_typed option
      * (Token.t (* "=" *) * sequence_expression) option
      * item_attribute list (* zero or more *)
    )
  | `Type_param_cons of type_parameter_constraint
  | `Class_init of (
        Token.t (* "initializer" *)
      * sequence_expression
      * item_attribute list (* zero or more *)
    )
  | `Choice_item_exte of item_extension_
]

and class_field_specification = [
    `Inhe_spec of (
        Token.t (* "inherit" *)
      * simple_class_type
      * item_attribute list (* zero or more *)
    )
  | `Inst_var_spec of (
        Token.t (* "val" *)
      * anon_choice_muta_d43fe41 list (* zero or more *)
      * identifier (*tok*)
      * typed
      * item_attribute list (* zero or more *)
    )
  | `Meth_spec of (
        Token.t (* "method" *)
      * anon_choice_priv_c7cc539 list (* zero or more *)
      * identifier (*tok*)
      * polymorphic_typed
      * item_attribute list (* zero or more *)
    )
  | `Type_param_cons of type_parameter_constraint
  | `Choice_item_exte of item_extension_
]

and class_type = [
    `Simple_class_type of simple_class_type
  | `Class_func_type of (
        (Token.t (* "?" *) option * identifier (*tok*) * Token.t (* ":" *))
          option
      * tuple_type
      * Token.t (* "->" *)
      * class_type
    )
]

and class_type_binding = (
    Token.t (* "virtual" *) option
  * anon_LBRACK_type_param_rep_COMMA_type_param_RBRACK_cea5434 option
  * identifier (*tok*)
  * Token.t (* "=" *)
  * simple_class_type
  * item_attribute list (* zero or more *)
)

and class_type_definition = (
    Token.t (* "class" *)
  * Token.t (* "type" *)
  * attribute option
  * class_type_binding
  * (Token.t (* "and" *) * class_type_binding) list (* zero or more *)
)

and class_typed = (Token.t (* ":" *) * class_type)

and constructor_argument = [
    `Simple_type_rep_STAR_simple_type of (
        simple_type
      * (Token.t (* "*" *) * simple_type) list (* zero or more *)
    )
  | `Record_decl of record_declaration
]

and constructor_declaration = (
    [
        `Cons_name of constructor_name
      | `Choice_LBRACK_RBRACK of [
            `LBRACK_RBRACK of (Token.t (* "[" *) * Token.t (* "]" *))
          | `LPAR_RPAR of (Token.t (* "(" *) * Token.t (* ")" *))
          | `True of Token.t (* "true" *)
          | `False of Token.t (* "false" *)
        ]
    ]
  * [
        `Of_cons_arg of (Token.t (* "of" *) * constructor_argument)
      | `COLON_opt_rep1_type_var_DOT_opt_cons_arg_DASHGT_simple_type of (
            Token.t (* ":" *)
          * (type_variable list (* one or more *) * Token.t (* "." *)) option
          * (constructor_argument * Token.t (* "->" *)) option
          * simple_type
        )
      | `EQ_cons_path of (Token.t (* "=" *) * constructor_path)
    ]
      option
)

and do_clause = (
    Token.t (* "do" *)
  * sequence_expression option
  * Token.t (* "done" *)
)

and else_clause = (Token.t (* "else" *) * expression)

and exception_definition = (
    Token.t (* "exception" *)
  * attribute option
  * constructor_declaration
  * item_attribute list (* zero or more *)
)

and expression = [
    `Simple_exp of simple_expression
  | `Prod_exp of (expression * Token.t (* "," *) * expression)
  | `Cons_exp of (expression * Token.t (* "::" *) * expression)
  | `App_exp of (simple_expression * argument list (* one or more *))
  | `Infix_exp of infix_expression
  | `Sign_exp of (sign_operator * expression)
  | `Set_exp of (
        [
            `Field_get_exp of field_get_expression
          | `Array_get_exp of array_get_expression
          | `Str_get_exp of string_get_expression
          | `Biga_get_exp of bigarray_get_expression
          | `Inst_var_name of identifier (*tok*)
        ]
      * Token.t (* "<-" *)
      * expression
    )
  | `If_exp of (
        Token.t (* "if" *)
      * attribute option
      * sequence_expression
      * then_clause
      * else_clause option
    )
  | `While_exp of (
        Token.t (* "while" *)
      * attribute option
      * sequence_expression
      * do_clause
    )
  | `For_exp of (
        Token.t (* "for" *)
      * attribute option
      * value_pattern
      * Token.t (* "=" *)
      * sequence_expression
      * [ `To of Token.t (* "to" *) | `Downto of Token.t (* "downto" *) ]
      * sequence_expression
      * do_clause
    )
  | `Match_exp of (
        [
            `Match_opt_attr of (Token.t (* "match" *) * attribute option)
          | `Match_op of match_operator (*tok*)
        ]
      * sequence_expression
      * Token.t (* "with" *)
      * match_cases
    )
  | `Func_exp of (Token.t (* "function" *) * attribute option * match_cases)
  | `Fun_exp of (
        Token.t (* "fun" *)
      * attribute option
      * parameter_ list (* one or more *)
      * simple_typed option
      * Token.t (* "->" *)
      * sequence_expression
    )
  | `Try_exp of (
        Token.t (* "try" *)
      * attribute option
      * sequence_expression
      * Token.t (* "with" *)
      * match_cases
    )
  | `Let_exp of (value_definition * Token.t (* "in" *) * sequence_expression)
  | `Assert_exp of (
        Token.t (* "assert" *)
      * attribute option
      * simple_expression
    )
  | `Lazy_exp of (
        Token.t (* "lazy" *)
      * attribute option
      * simple_expression
    )
  | `Let_module_exp of (
        Token.t (* "let" *) * module_definition * Token.t (* "in" *)
      * sequence_expression
    )
  | `Let_open_exp of (
        Token.t (* "let" *) * open_module * Token.t (* "in" *)
      * sequence_expression
    )
  | `Let_exc_exp of (
        Token.t (* "let" *) * exception_definition * Token.t (* "in" *)
      * sequence_expression
    )
]

and expression_item = (
    sequence_expression
  * item_attribute list (* zero or more *)
)

and extension_ = [
    `Exte of (
        Token.t (* "[%" *)
      * attribute_id
      * attribute_payload option
      * Token.t (* "]" *)
    )
  | `Quoted_exte of (
        Token.t (* "{%" *)
      * attribute_id
      * pat_3d340f6 option
      * quoted_string
      * Token.t (* "}" *)
    )
]

and external_ = (
    Token.t (* "external" *)
  * attribute option
  * value_name
  * polymorphic_typed
  * Token.t (* "=" *)
  * string_ list (* one or more *)
  * item_attribute list (* zero or more *)
)

and field_binding_pattern = (
    field_path
  * typed option
  * (Token.t (* "=" *) * binding_pattern) option
)

and field_declaration = (
    Token.t (* "mutable" *) option
  * identifier (*tok*)
  * polymorphic_typed
)

and field_expression = (
    field_path
  * typed option
  * (Token.t (* "=" *) * expression) option
)

and field_get_expression = (
    simple_expression * Token.t (* "." *) * field_path
)

and field_pattern = (
    field_path
  * typed option
  * (Token.t (* "=" *) * pattern) option
)

and floating_attribute = (
    Token.t (* "[@@@" *)
  * attribute_id
  * attribute_payload option
  * Token.t (* "]" *)
)

and guard = (Token.t (* "when" *) * sequence_expression)

and infix_expression = [
    `Exp_pow_op_exp of (expression * pow_operator (*tok*) * expression)
  | `Exp_mult_op_exp of (expression * mult_operator (*tok*) * expression)
  | `Exp_add_op_exp of (expression * add_operator * expression)
  | `Exp_concat_op_exp of (expression * concat_operator (*tok*) * expression)
  | `Exp_rel_op_exp of (expression * rel_operator (*tok*) * expression)
  | `Exp_and_op_exp of (expression * and_operator (*tok*) * expression)
  | `Exp_or_op_exp of (expression * or_operator (*tok*) * expression)
  | `Exp_assign_op_exp of (expression * assign_operator (*tok*) * expression)
]

and instance_variable_expression = (
    identifier (*tok*)
  * (Token.t (* "=" *) * expression) option
)

and item_attribute = (
    Token.t (* "[@@" *)
  * attribute_id
  * attribute_payload option
  * Token.t (* "]" *)
)

and item_extension_ = [
    `Item_exte of (
        Token.t (* "[%%" *)
      * attribute_id
      * attribute_payload option
      * Token.t (* "]" *)
      * item_attribute list (* zero or more *)
    )
  | `Quoted_item_exte of (
        Token.t (* "{%%" *)
      * attribute_id
      * pat_3d340f6 option
      * quoted_string
      * Token.t (* "}" *)
      * item_attribute list (* zero or more *)
    )
]

and labeled_argument = [
    `Choice_TILDE_id of (anon_choice_TILDE_72781e5 * identifier (*tok*))
  | `Choice_TILDE_id_imm_tok_colon_simple_exp of (
        anon_choice_TILDE_72781e5 * identifier (*tok*)
      * imm_tok_colon (*tok*) * simple_expression
    )
  | `Choice_TILDE_LPAR_id_typed_RPAR of (
        anon_choice_TILDE_72781e5 * Token.t (* "(" *) * identifier (*tok*)
      * typed * Token.t (* ")" *)
    )
]

and let_binding = (
    binding_pattern
  * (
        parameter_ list (* zero or more *)
      * polymorphic_typed option
      * (Token.t (* ":>" *) * type_) option
      * Token.t (* "=" *)
      * sequence_expression
    )
      option
  * item_attribute list (* zero or more *)
)

and list_binding_pattern = (
    Token.t (* "[" *)
  * anon_bind_pat_rep_SEMI_bind_pat_opt_SEMI_ddad36f option
  * Token.t (* "]" *)
)

and list_expression = (
    Token.t (* "[" *)
  * anon_exp_rep_SEMI_exp_opt_SEMI_72c923c option
  * Token.t (* "]" *)
)

and list_pattern = (
    Token.t (* "[" *)
  * anon_pat_rep_SEMI_pat_opt_SEMI_35217e1 option
  * Token.t (* "]" *)
)

and match_case = (
    pattern
  * guard option
  * Token.t (* "->" *)
  * [ `Seq_exp of sequence_expression | `Refu_case of Token.t (* "." *) ]
)

and match_cases = (
    Token.t (* "|" *) option
  * match_case
  * (Token.t (* "|" *) * match_case) list (* zero or more *)
)

and module_binding = (
    anon_choice_module_name_7ad5569
  * module_parameter list (* zero or more *)
  * module_typed option
  * (anon_choice_EQ_4ccabd6 * module_expression) option
  * item_attribute list (* zero or more *)
)

and module_definition = (
    Token.t (* "module" *)
  * attribute option
  * Token.t (* "rec" *) option
  * module_binding
  * (Token.t (* "and" *) * module_binding) list (* zero or more *)
)

and module_expression = [
    `Simple_module_exp of simple_module_expression
  | `Module_path of module_path
  | `Stru_ of (
        Token.t (* "struct" *)
      * structure option
      * Token.t (* "end" *)
    )
  | `Func of (
        Token.t (* "functor" *)
      * module_parameter list (* one or more *)
      * Token.t (* "->" *)
      * module_expression
    )
  | `Module_app of (
        module_expression
      * [
            `Simple_module_exp of simple_module_expression
          | `LPAR_RPAR of (Token.t (* "(" *) * Token.t (* ")" *))
        ]
    )
]

and module_parameter = (
    Token.t (* "(" *)
  * (anon_choice_module_name_7ad5569 * module_typed) option
  * Token.t (* ")" *)
)

and module_type = [
    `Module_type_path of module_type_path
  | `Sign_ of (Token.t (* "sig" *) * signature option * Token.t (* "end" *))
  | `Module_type_cons of (
        module_type
      * Token.t (* "with" *)
      * anon_choice_cons_type_771aabb
      * (Token.t (* "and" *) * anon_choice_cons_type_771aabb)
          list (* zero or more *)
    )
  | `Module_type_of of (
        Token.t (* "module" *) * Token.t (* "type" *) * Token.t (* "of" *)
      * module_expression
    )
  | `Func_type of (
        [
            `Func_rep_module_param of (
                Token.t (* "functor" *)
              * module_parameter list (* zero or more *)
            )
          | `Module_type of module_type
          | `LPAR_RPAR of (Token.t (* "(" *) * Token.t (* ")" *))
        ]
      * Token.t (* "->" *)
      * module_type
    )
  | `Paren_module_type of (
        Token.t (* "(" *) * module_type * Token.t (* ")" *)
    )
  | `Choice_exte of extension_
]

and module_type_definition = (
    Token.t (* "module" *)
  * Token.t (* "type" *)
  * attribute option
  * module_type_name
  * (anon_choice_EQ_4ccabd6 * module_type) option
  * item_attribute list (* zero or more *)
)

and module_typed = (Token.t (* ":" *) * module_type)

and object_copy_expression = (
    Token.t (* "{<" *)
  * (
        instance_variable_expression
      * (Token.t (* ";" *) * instance_variable_expression)
          list (* zero or more *)
    )
      option
  * Token.t (* ";" *) option
  * Token.t (* ">}" *)
)

and object_expression = (
    Token.t (* "object" *)
  * attribute option
  * (Token.t (* "(" *) * pattern * typed option * Token.t (* ")" *)) option
  * [ `Class_field of class_field | `Floa_attr of floating_attribute ]
      list (* zero or more *)
  * Token.t (* "end" *)
)

and open_module = (
    Token.t (* "open" *)
  * Token.t (* "!" *) option
  * attribute option
  * module_expression
  * item_attribute list (* zero or more *)
)

and package_expression = (
    Token.t (* "(" *)
  * Token.t (* "module" *)
  * attribute option
  * module_expression
  * module_typed option
  * Token.t (* ")" *)
)

and package_pattern = (
    Token.t (* "(" *)
  * Token.t (* "module" *)
  * attribute option
  * anon_choice_module_name_7ad5569
  * module_typed option
  * Token.t (* ")" *)
)

and package_type = (
    Token.t (* "(" *)
  * Token.t (* "module" *)
  * attribute option
  * module_type
  * Token.t (* ")" *)
)

and parameter = [
    `Simple_pat of simple_pattern
  | `Choice_TILDE_simple_value_pat of (
        anon_choice_TILDE_72781e5 * identifier (*tok*)
    )
  | `Choice_TILDE_id_imm_tok_colon_simple_pat of (
        anon_choice_TILDE_72781e5 * identifier (*tok*)
      * imm_tok_colon (*tok*) * simple_pattern
    )
  | `Choice_TILDE_LPAR_simple_value_pat_opt_typed_opt_EQ_seq_exp_RPAR of (
        anon_choice_TILDE_72781e5
      * Token.t (* "(" *)
      * identifier (*tok*)
      * typed option
      * (Token.t (* "=" *) * sequence_expression) option
      * Token.t (* ")" *)
    )
  | `Choice_TILDE_id_imm_tok_colon_LPAR_pat_opt_typed_EQ_seq_exp_RPAR of (
        anon_choice_TILDE_72781e5
      * identifier (*tok*)
      * imm_tok_colon (*tok*)
      * Token.t (* "(" *)
      * pattern
      * typed option
      * Token.t (* "=" *)
      * sequence_expression
      * Token.t (* ")" *)
    )
]

and parameter_ = [
    `Param of parameter
  | `Paren_abst_type of parenthesized_abstract_type
]

and parenthesized_expression = [
    `Begin_opt_attr_seq_exp_end of (
        Token.t (* "begin" *)
      * attribute option
      * sequence_expression
      * Token.t (* "end" *)
    )
  | `LPAR_seq_exp_RPAR of (
        Token.t (* "(" *) * sequence_expression * Token.t (* ")" *)
    )
]

and parenthesized_type = (Token.t (* "(" *) * type_ * Token.t (* ")" *))

and pattern = [
    `Simple_pat of simple_pattern
  | `Alias_pat of (pattern * Token.t (* "as" *) * value_pattern)
  | `Or_pat of (pattern * Token.t (* "|" *) * pattern)
  | `Cons_pat_4ec55c1 of (
        constructor_path
      * parenthesized_abstract_type option
      * pattern
    )
  | `Tag_pat of (tag * pattern)
  | `Tuple_pat of (pattern * Token.t (* "," *) * pattern)
  | `Cons_pat_9b4e481 of (pattern * Token.t (* "::" *) * pattern)
  | `Range_pat of range_pattern
  | `Lazy_pat of (Token.t (* "lazy" *) * attribute option * pattern)
  | `Exc_pat of (Token.t (* "exception" *) * attribute option * pattern)
]

and polymorphic_type = [
    `Poly_type_ of (
        [
            `Rep1_type_var of type_variable list (* one or more *)
          | `Abst_type of abstract_type
        ]
      * Token.t (* "." *)
      * type_
    )
  | `Type of type_
]

and polymorphic_typed = (Token.t (* ":" *) * polymorphic_type)

and polymorphic_variant_type = [
    `LBRACK_tag_spec_RBRACK of (
        Token.t (* "[" *) * tag_specification * Token.t (* "]" *)
    )
  | `LBRACK_opt_tag_spec_BAR_tag_spec_rep_BAR_tag_spec_RBRACK of (
        Token.t (* "[" *)
      * tag_spec option
      * Token.t (* "|" *)
      * tag_spec
      * (Token.t (* "|" *) * tag_spec) list (* zero or more *)
      * Token.t (* "]" *)
    )
  | `LBRACKGT_opt_BAR_opt_tag_spec_rep_BAR_tag_spec_RBRACK of (
        Token.t (* "[>" *)
      * Token.t (* "|" *) option
      * (tag_spec * (Token.t (* "|" *) * tag_spec) list (* zero or more *))
          option
      * Token.t (* "]" *)
    )
  | `LBRACKLT_opt_BAR_tag_spec_rep_BAR_tag_spec_opt_GT_rep1_tag_RBRACK of (
        Token.t (* "[<" *)
      * Token.t (* "|" *) option
      * tag_spec
      * (Token.t (* "|" *) * tag_spec) list (* zero or more *)
      * (Token.t (* ">" *) * tag list (* one or more *)) option
      * Token.t (* "]" *)
    )
]

and record_binding_pattern = (
    Token.t (* "{" *)
  * field_binding_pattern
  * (Token.t (* ";" *) * field_binding_pattern) list (* zero or more *)
  * (Token.t (* ";" *) * Token.t (* "_" *)) option
  * Token.t (* ";" *) option
  * Token.t (* "}" *)
)

and record_declaration = (
    Token.t (* "{" *)
  * field_declaration
  * (Token.t (* ";" *) * field_declaration) list (* zero or more *)
  * Token.t (* ";" *) option
  * Token.t (* "}" *)
)

and record_expression = (
    Token.t (* "{" *)
  * (simple_expression * Token.t (* "with" *)) option
  * field_expression
  * (Token.t (* ";" *) * field_expression) list (* zero or more *)
  * Token.t (* ";" *) option
  * Token.t (* "}" *)
)

and record_pattern = (
    Token.t (* "{" *)
  * field_pattern
  * (Token.t (* ";" *) * field_pattern) list (* zero or more *)
  * (Token.t (* ";" *) * Token.t (* "_" *)) option
  * Token.t (* ";" *) option
  * Token.t (* "}" *)
)

and sequence_expression = [
    `Exp of expression
  | `Seq_exp_ of (
        expression
      * Token.t (* ";" *)
      * (attribute option * sequence_expression) option
    )
]

and signature = [
    `Rep1_SEMISEMI of Token.t (* ";;" *) list (* one or more *)
  | `Rep1_rep_SEMISEMI_sign_item_rep_SEMISEMI of (
        (Token.t (* ";;" *) list (* zero or more *) * signature_item)
          list (* one or more *)
      * Token.t (* ";;" *) list (* zero or more *)
    )
]

and signature_item = [
    `Value_spec of (
        Token.t (* "val" *)
      * attribute option
      * value_name
      * polymorphic_typed
      * item_attribute list (* zero or more *)
    )
  | `Exte of external_
  | `Type_defi of type_definition
  | `Exc_defi of exception_definition
  | `Module_defi of module_definition
  | `Module_type_defi of module_type_definition
  | `Open_module of open_module
  | `Incl_module_type of (
        Token.t (* "include" *)
      * attribute option
      * module_type
      * item_attribute list (* zero or more *)
    )
  | `Class_defi of class_definition
  | `Class_type_defi of class_type_definition
  | `Floa_attr of floating_attribute
  | `Choice_item_exte of item_extension_
]

and simple_class_expression = [
    `Class_path of class_path
  | `Inst_class of (
        Token.t (* "[" *)
      * type_
      * (Token.t (* "," *) * type_) list (* zero or more *)
      * Token.t (* "]" *)
      * class_path
    )
  | `Obj_exp of object_expression
  | `Typed_class_exp of (
        Token.t (* "(" *) * class_expression * class_typed
      * Token.t (* ")" *)
    )
  | `Paren_class_exp of (
        Token.t (* "(" *) * class_expression * Token.t (* ")" *)
    )
  | `Choice_exte of extension_
]

and simple_class_type = [
    `Class_type_path of class_type_path
  | `Inst_class_type of (
        Token.t (* "[" *)
      * type_
      * (Token.t (* "," *) * type_) list (* zero or more *)
      * Token.t (* "]" *)
      * class_type_path
    )
  | `Class_body_type of (
        Token.t (* "object" *)
      * parenthesized_type option
      * [
            `Class_field_spec of class_field_specification
          | `Floa_attr of floating_attribute
        ]
          list (* zero or more *)
      * Token.t (* "end" *)
    )
  | `Let_open_class_type of (
        Token.t (* "let" *) * open_module * Token.t (* "in" *)
      * simple_class_type
    )
  | `Choice_exte of extension_
]

and simple_expression = [
    `Value_path of value_path
  | `Cst of constant
  | `Typed_exp of (
        Token.t (* "(" *) * sequence_expression * typed * Token.t (* ")" *)
    )
  | `Cons_path of constructor_path
  | `Tag of tag
  | `List_exp of list_expression
  | `Array_exp of array_expression
  | `Record_exp of record_expression
  | `Prefix_exp of (prefix_operator (*tok*) * simple_expression)
  | `Hash_exp of (
        simple_expression * hash_operator (*tok*) * simple_expression
    )
  | `Field_get_exp of field_get_expression
  | `Array_get_exp of array_get_expression
  | `Str_get_exp of string_get_expression
  | `Biga_get_exp of bigarray_get_expression
  | `Coer_exp of (
        Token.t (* "(" *)
      * sequence_expression
      * typed option
      * Token.t (* ":>" *)
      * type_
      * Token.t (* ")" *)
    )
  | `Local_open_exp of (
        module_path
      * Token.t (* "." *)
      * [
            `LPAR_opt_seq_exp_RPAR of (
                Token.t (* "(" *)
              * sequence_expression option
              * Token.t (* ")" *)
            )
          | `List_exp of list_expression
          | `Array_exp of array_expression
          | `Record_exp of record_expression
          | `Obj_copy_exp of object_copy_expression
          | `Pack_exp of package_expression
        ]
    )
  | `Pack_exp of package_expression
  | `New_exp of (Token.t (* "new" *) * attribute option * class_path)
  | `Obj_copy_exp of object_copy_expression
  | `Meth_invo of (
        simple_expression * Token.t (* "#" *) * identifier (*tok*)
    )
  | `Obj_exp of object_expression
  | `Paren_exp of parenthesized_expression
  | `Ocam_value of ocamlyacc_value (*tok*)
  | `Choice_exte of extension_
]

and simple_module_expression = [
    `Typed_module_exp of (
        Token.t (* "(" *) * module_expression * module_typed
      * Token.t (* ")" *)
    )
  | `Paren_module_exp of (
        Token.t (* "(" *) * module_expression * Token.t (* ")" *)
    )
  | `Packed_module of (
        Token.t (* "(" *)
      * Token.t (* "val" *)
      * expression
      * module_typed option
      * (Token.t (* ":>" *) * module_type) option
      * Token.t (* ")" *)
    )
  | `Choice_exte of extension_
]

and simple_pattern = [
    `Choice_simple_value_pat of value_pattern
  | `Signed_cst of signed_constant
  | `Typed_pat of (Token.t (* "(" *) * pattern * typed * Token.t (* ")" *))
  | `Cons_path of constructor_path
  | `Tag of tag
  | `Poly_vari_pat of polymorphic_variant_pattern
  | `Record_pat of record_pattern
  | `List_pat of list_pattern
  | `Array_pat of array_pattern
  | `Local_open_pat of (
        module_path
      * Token.t (* "." *)
      * [
            `LPAR_opt_pat_RPAR of (
                Token.t (* "(" *)
              * pattern option
              * Token.t (* ")" *)
            )
          | `List_pat of list_pattern
          | `Array_pat of array_pattern
          | `Record_pat of record_pattern
        ]
    )
  | `Pack_pat of package_pattern
  | `Paren_pat of (Token.t (* "(" *) * pattern * Token.t (* ")" *))
  | `Choice_exte of extension_
]

and simple_type = [
    `Type_var of type_variable
  | `Type_cons_path of type_constructor_path
  | `Cons_type of (anon_choice_simple_type_9a0619a * type_constructor_path)
  | `Local_open_type of (
        extended_module_path
      * Token.t (* "." *)
      * [
            `LPAR_type_RPAR of parenthesized_type
          | `Pack_type of package_type
          | `Poly_vari_type of polymorphic_variant_type
        ]
    )
  | `Poly_vari_type of polymorphic_variant_type
  | `Pack_type of package_type
  | `Hash_type of (
        anon_choice_simple_type_9a0619a option
      * Token.t (* "#" *)
      * class_type_path
    )
  | `Obj_type of (
        Token.t (* "<" *)
      * [
            `Choice_meth_type_rep_SEMI_choice_meth_type_opt_SEMI_opt_DOTDOT of (
                anon_choice_meth_type_d8c4bdc
              * (Token.t (* ";" *) * anon_choice_meth_type_d8c4bdc)
                  list (* zero or more *)
              * (Token.t (* ";" *) * Token.t (* ".." *) option) option
            )
          | `DOTDOT of Token.t (* ".." *)
        ]
          option
      * Token.t (* ">" *)
    )
  | `Paren_type of parenthesized_type
  | `Choice_exte of extension_
]

and simple_typed = (Token.t (* ":" *) * simple_type)

and string_get_expression = (
    simple_expression
  * Token.t (* "." *)
  * indexing_operator_path option
  * Token.t (* "[" *)
  * sequence_expression
  * Token.t (* "]" *)
)

and structure = [
    `Rep1_SEMISEMI of Token.t (* ";;" *) list (* one or more *)
  | `Rep_SEMISEMI_choice_stru_item_rep_choice_rep_SEMISEMI_choice_stru_item_rep_SEMISEMI of (
        Token.t (* ";;" *) list (* zero or more *)
      * [
            `Stru_item of structure_item
          | `Topl_dire of toplevel_directive
          | `Exp_item of expression_item
        ]
      * [
            `Rep_SEMISEMI_choice_stru_item of (
                Token.t (* ";;" *) list (* zero or more *)
              * [
                    `Stru_item of structure_item
                  | `Topl_dire of toplevel_directive
                ]
            )
          | `Rep1_SEMISEMI_exp_item of (
                Token.t (* ";;" *) list (* one or more *)
              * expression_item
            )
        ]
          list (* zero or more *)
      * Token.t (* ";;" *) list (* zero or more *)
    )
]

and structure_item = [
    `Value_defi of value_definition
  | `Exte of external_
  | `Type_defi of type_definition
  | `Exc_defi of exception_definition
  | `Module_defi of module_definition
  | `Module_type_defi of module_type_definition
  | `Open_module of open_module
  | `Incl_module of (
        Token.t (* "include" *)
      * attribute option
      * module_expression
      * item_attribute list (* zero or more *)
    )
  | `Class_defi of class_definition
  | `Class_type_defi of class_type_definition
  | `Floa_attr of floating_attribute
  | `Choice_item_exte of item_extension_
]

and tag_spec = [ `Type of type_ | `Tag_spec of tag_specification ]

and tag_specification = (
    tag
  * (
        Token.t (* "of" *)
      * Token.t (* "&" *) option
      * type_
      * (Token.t (* "&" *) * type_) list (* zero or more *)
    )
      option
)

and then_clause = (Token.t (* "then" *) * expression)

and tuple_type = [
    `Simple_type of simple_type
  | `Tuple_type_ of (tuple_type * Token.t (* "*" *) * simple_type)
]

and type_ = [
    `Tuple_type of tuple_type
  | `Func_type of (
        [ `Typed_label of typed_label | `Type of type_ ]
      * Token.t (* "->" *)
      * type_
    )
  | `Alia_type of (type_ * Token.t (* "as" *) * type_variable)
]

and type_binding = (
    type_params option
  * [
        `Id_opt_type_equa_opt_EQ_opt_priv_choice_vari_decl_rep_type_cons of (
            identifier (*tok*)
          * type_equation option
          * (
                Token.t (* "=" *)
              * Token.t (* "private" *) option
              * [
                    `Vari_decl of variant_declaration
                  | `Record_decl of record_declaration
                  | `DOTDOT of Token.t (* ".." *)
                ]
            )
              option
          * type_constraint list (* zero or more *)
        )
      | `Type_cons_path_PLUSEQ_opt_priv_vari_decl of (
            type_constructor_path
          * Token.t (* "+=" *)
          * Token.t (* "private" *) option
          * variant_declaration
        )
    ]
  * item_attribute list (* zero or more *)
)

and type_constraint = (
    Token.t (* "constraint" *) * type_ * Token.t (* "=" *) * type_
)

and type_definition = (
    Token.t (* "type" *)
  * attribute option
  * Token.t (* "nonrec" *) option
  * type_binding
  * (Token.t (* "and" *) * type_binding) list (* zero or more *)
)

and type_equation = (
    anon_choice_EQ_4ccabd6
  * Token.t (* "private" *) option
  * type_
)

and type_parameter_constraint = (
    Token.t (* "constraint" *)
  * type_
  * Token.t (* "=" *)
  * type_
  * item_attribute list (* zero or more *)
)

and typed = (Token.t (* ":" *) * type_)

and typed_label = (
    Token.t (* "?" *) option
  * identifier (*tok*)
  * Token.t (* ":" *)
  * type_
)

and value_definition = (
    [
        `Let_opt_attr_opt_rec of (
            Token.t (* "let" *)
          * attribute option
          * Token.t (* "rec" *) option
        )
      | `Let_op of let_operator (*tok*)
    ]
  * let_binding
  * (
        [
            `And of Token.t (* "and" *)
          | `Let_and_op of let_and_operator (*tok*)
        ]
      * let_binding
    )
      list (* zero or more *)
)

and variant_declaration = [
    `BAR_opt_cons_decl_rep_BAR_cons_decl of (
        Token.t (* "|" *)
      * anon_cons_decl_rep_BAR_cons_decl_fc0ccc5 option
    )
  | `Cons_decl_rep_BAR_cons_decl of anon_cons_decl_rep_BAR_cons_decl_fc0ccc5
]

type compilation_unit = [
    `Opt_sheb_opt_stru of (shebang (*tok*) option * structure option)
  | `Sign of signature
]

type line_number_directive (* inlined *) = Token.t

type comment (* inlined *) = Token.t

type refutation_case (* inlined *) = Token.t (* "." *)

type signed_number (* inlined *) = (pat_dece469 * tok_choice_pat_4349e4b)

type module_name (* inlined *) = capitalized_identifier (*tok*)

type method_name (* inlined *) = identifier (*tok*)

type class_type_name (* inlined *) = identifier (*tok*)

type simple_value_pattern (* inlined *) = identifier (*tok*)

type type_constructor (* inlined *) = identifier (*tok*)

type class_name (* inlined *) = identifier (*tok*)

type field_name (* inlined *) = identifier (*tok*)

type instance_variable_name (* inlined *) = identifier (*tok*)

type label_name (* inlined *) = identifier (*tok*)

type label (* inlined *) = (anon_choice_TILDE_72781e5 * identifier (*tok*))

type constrain_module (* inlined *) = (
    Token.t (* "module" *) * module_path * anon_choice_EQ_4ccabd6
  * extended_module_path
)

type character (* inlined *) = (
    Token.t (* "'" *) * character_content * Token.t (* "'" *)
)

type quoted_string_ (* inlined *) = (
    Token.t (* "{" *) * quoted_string * Token.t (* "}" *)
)

type quoted_extension (* inlined *) = (
    Token.t (* "{%" *)
  * attribute_id
  * pat_3d340f6 option
  * quoted_string
  * Token.t (* "}" *)
)

type new_expression (* inlined *) = (
    Token.t (* "new" *)
  * attribute option
  * class_path
)

type alias_binding_pattern (* inlined *) = (
    binding_pattern * Token.t (* "as" *) * value_name
)

type alias_pattern (* inlined *) = (
    pattern * Token.t (* "as" *) * value_pattern
)

type aliased_type (* inlined *) = (
    type_ * Token.t (* "as" *) * type_variable
)

type anon_LPAR_type_rep_COMMA_type_RPAR_429f44d (* inlined *) = (
    Token.t (* "(" *)
  * type_
  * (Token.t (* "," *) * type_) list (* zero or more *)
  * Token.t (* ")" *)
)

type application_expression (* inlined *) = (
    simple_expression
  * argument list (* one or more *)
)

type assert_expression (* inlined *) = (
    Token.t (* "assert" *)
  * attribute option
  * simple_expression
)

type class_application (* inlined *) = (
    simple_class_expression
  * argument list (* one or more *)
)

type class_body_type (* inlined *) = (
    Token.t (* "object" *)
  * parenthesized_type option
  * [
        `Class_field_spec of class_field_specification
      | `Floa_attr of floating_attribute
    ]
      list (* zero or more *)
  * Token.t (* "end" *)
)

type class_function (* inlined *) = (
    Token.t (* "fun" *)
  * parameter_ list (* one or more *)
  * Token.t (* "->" *)
  * class_expression
)

type class_function_type (* inlined *) = (
    (Token.t (* "?" *) option * identifier (*tok*) * Token.t (* ":" *))
      option
  * tuple_type
  * Token.t (* "->" *)
  * class_type
)

type class_initializer (* inlined *) = (
    Token.t (* "initializer" *)
  * sequence_expression
  * item_attribute list (* zero or more *)
)

type coercion_expression (* inlined *) = (
    Token.t (* "(" *)
  * sequence_expression
  * typed option
  * Token.t (* ":>" *)
  * type_
  * Token.t (* ")" *)
)

type cons_binding_pattern (* inlined *) = (
    binding_pattern * Token.t (* "::" *) * binding_pattern
)

type cons_expression (* inlined *) = (
    expression * Token.t (* "::" *) * expression
)

type cons_pattern (* inlined *) = (pattern * Token.t (* "::" *) * pattern)

type constrain_module_type (* inlined *) = (
    Token.t (* "module" *) * Token.t (* "type" *) * module_type_path
  * anon_choice_EQ_4ccabd6 * module_type
)

type constrain_type (* inlined *) = (
    Token.t (* "type" *)
  * type_params option
  * type_constructor_path
  * type_equation
  * type_constraint list (* zero or more *)
)

type constructed_type (* inlined *) = (
    anon_choice_simple_type_9a0619a * type_constructor_path
)

type constructor_binding_pattern (* inlined *) = (
    constructor_path * binding_pattern
)

type constructor_pattern (* inlined *) = (
    constructor_path
  * parenthesized_abstract_type option
  * pattern
)

type exception_pattern (* inlined *) = (
    Token.t (* "exception" *)
  * attribute option
  * pattern
)

type extension (* inlined *) = (
    Token.t (* "[%" *)
  * attribute_id
  * attribute_payload option
  * Token.t (* "]" *)
)

type for_expression (* inlined *) = (
    Token.t (* "for" *)
  * attribute option
  * value_pattern
  * Token.t (* "=" *)
  * sequence_expression
  * [ `To of Token.t (* "to" *) | `Downto of Token.t (* "downto" *) ]
  * sequence_expression
  * do_clause
)

type fun_expression (* inlined *) = (
    Token.t (* "fun" *)
  * attribute option
  * parameter_ list (* one or more *)
  * simple_typed option
  * Token.t (* "->" *)
  * sequence_expression
)

type function_expression (* inlined *) = (
    Token.t (* "function" *)
  * attribute option
  * match_cases
)

type function_type (* inlined *) = (
    [ `Typed_label of typed_label | `Type of type_ ]
  * Token.t (* "->" *)
  * type_
)

type functor_ (* inlined *) = (
    Token.t (* "functor" *)
  * module_parameter list (* one or more *)
  * Token.t (* "->" *)
  * module_expression
)

type functor_type (* inlined *) = (
    [
        `Func_rep_module_param of (
            Token.t (* "functor" *)
          * module_parameter list (* zero or more *)
        )
      | `Module_type of module_type
      | `LPAR_RPAR of (Token.t (* "(" *) * Token.t (* ")" *))
    ]
  * Token.t (* "->" *)
  * module_type
)

type hash_expression (* inlined *) = (
    simple_expression * hash_operator (*tok*) * simple_expression
)

type hash_type (* inlined *) = (
    anon_choice_simple_type_9a0619a option
  * Token.t (* "#" *)
  * class_type_path
)

type if_expression (* inlined *) = (
    Token.t (* "if" *)
  * attribute option
  * sequence_expression
  * then_clause
  * else_clause option
)

type include_module (* inlined *) = (
    Token.t (* "include" *)
  * attribute option
  * module_expression
  * item_attribute list (* zero or more *)
)

type include_module_type (* inlined *) = (
    Token.t (* "include" *)
  * attribute option
  * module_type
  * item_attribute list (* zero or more *)
)

type inheritance_definition (* inlined *) = (
    Token.t (* "inherit" *)
  * Token.t (* "!" *) option
  * class_expression
  * (Token.t (* "as" *) * value_pattern) option
  * item_attribute list (* zero or more *)
)

type inheritance_specification (* inlined *) = (
    Token.t (* "inherit" *)
  * simple_class_type
  * item_attribute list (* zero or more *)
)

type instance_variable_definition (* inlined *) = (
    Token.t (* "val" *)
  * Token.t (* "!" *) option
  * anon_choice_muta_d43fe41 list (* zero or more *)
  * identifier (*tok*)
  * typed option
  * (Token.t (* ":>" *) * type_) option
  * (Token.t (* "=" *) * sequence_expression) option
  * item_attribute list (* zero or more *)
)

type instance_variable_specification (* inlined *) = (
    Token.t (* "val" *)
  * anon_choice_muta_d43fe41 list (* zero or more *)
  * identifier (*tok*)
  * typed
  * item_attribute list (* zero or more *)
)

type instantiated_class (* inlined *) = (
    Token.t (* "[" *)
  * type_
  * (Token.t (* "," *) * type_) list (* zero or more *)
  * Token.t (* "]" *)
  * class_path
)

type instantiated_class_type (* inlined *) = (
    Token.t (* "[" *)
  * type_
  * (Token.t (* "," *) * type_) list (* zero or more *)
  * Token.t (* "]" *)
  * class_type_path
)

type item_extension (* inlined *) = (
    Token.t (* "[%%" *)
  * attribute_id
  * attribute_payload option
  * Token.t (* "]" *)
  * item_attribute list (* zero or more *)
)

type lazy_binding_pattern (* inlined *) = (
    Token.t (* "lazy" *)
  * attribute option
  * binding_pattern
)

type lazy_expression (* inlined *) = (
    Token.t (* "lazy" *)
  * attribute option
  * simple_expression
)

type lazy_pattern (* inlined *) = (
    Token.t (* "lazy" *)
  * attribute option
  * pattern
)

type let_class_expression (* inlined *) = (
    value_definition * Token.t (* "in" *) * class_expression
)

type let_exception_expression (* inlined *) = (
    Token.t (* "let" *) * exception_definition * Token.t (* "in" *)
  * sequence_expression
)

type let_expression (* inlined *) = (
    value_definition * Token.t (* "in" *) * sequence_expression
)

type let_module_expression (* inlined *) = (
    Token.t (* "let" *) * module_definition * Token.t (* "in" *)
  * sequence_expression
)

type let_open_class_expression (* inlined *) = (
    Token.t (* "let" *) * open_module * Token.t (* "in" *) * class_expression
)

type let_open_class_type (* inlined *) = (
    Token.t (* "let" *) * open_module * Token.t (* "in" *)
  * simple_class_type
)

type let_open_expression (* inlined *) = (
    Token.t (* "let" *) * open_module * Token.t (* "in" *)
  * sequence_expression
)

type local_open_binding_pattern (* inlined *) = (
    module_path
  * Token.t (* "." *)
  * [
        `LPAR_opt_bind_pat_RPAR of (
            Token.t (* "(" *)
          * binding_pattern option
          * Token.t (* ")" *)
        )
      | `List_bind_pat of list_binding_pattern
      | `Array_bind_pat of array_binding_pattern
      | `Record_bind_pat of record_binding_pattern
    ]
)

type local_open_expression (* inlined *) = (
    module_path
  * Token.t (* "." *)
  * [
        `LPAR_opt_seq_exp_RPAR of (
            Token.t (* "(" *)
          * sequence_expression option
          * Token.t (* ")" *)
        )
      | `List_exp of list_expression
      | `Array_exp of array_expression
      | `Record_exp of record_expression
      | `Obj_copy_exp of object_copy_expression
      | `Pack_exp of package_expression
    ]
)

type local_open_pattern (* inlined *) = (
    module_path
  * Token.t (* "." *)
  * [
        `LPAR_opt_pat_RPAR of (
            Token.t (* "(" *)
          * pattern option
          * Token.t (* ")" *)
        )
      | `List_pat of list_pattern
      | `Array_pat of array_pattern
      | `Record_pat of record_pattern
    ]
)

type local_open_type (* inlined *) = (
    extended_module_path
  * Token.t (* "." *)
  * [
        `LPAR_type_RPAR of parenthesized_type
      | `Pack_type of package_type
      | `Poly_vari_type of polymorphic_variant_type
    ]
)

type match_expression (* inlined *) = (
    [
        `Match_opt_attr of (Token.t (* "match" *) * attribute option)
      | `Match_op of match_operator (*tok*)
    ]
  * sequence_expression
  * Token.t (* "with" *)
  * match_cases
)

type method_definition (* inlined *) = (
    Token.t (* "method" *)
  * Token.t (* "!" *) option
  * anon_choice_priv_c7cc539 list (* zero or more *)
  * identifier (*tok*)
  * parameter_ list (* zero or more *)
  * polymorphic_typed option
  * (Token.t (* "=" *) * sequence_expression) option
  * item_attribute list (* zero or more *)
)

type method_invocation (* inlined *) = (
    simple_expression * Token.t (* "#" *) * identifier (*tok*)
)

type method_specification (* inlined *) = (
    Token.t (* "method" *)
  * anon_choice_priv_c7cc539 list (* zero or more *)
  * identifier (*tok*)
  * polymorphic_typed
  * item_attribute list (* zero or more *)
)

type method_type (* inlined *) = (identifier (*tok*) * polymorphic_typed)

type module_application (* inlined *) = (
    module_expression
  * [
        `Simple_module_exp of simple_module_expression
      | `LPAR_RPAR of (Token.t (* "(" *) * Token.t (* ")" *))
    ]
)

type module_type_constraint (* inlined *) = (
    module_type
  * Token.t (* "with" *)
  * anon_choice_cons_type_771aabb
  * (Token.t (* "and" *) * anon_choice_cons_type_771aabb)
      list (* zero or more *)
)

type module_type_of (* inlined *) = (
    Token.t (* "module" *) * Token.t (* "type" *) * Token.t (* "of" *)
  * module_expression
)

type object_type (* inlined *) = (
    Token.t (* "<" *)
  * [
        `Choice_meth_type_rep_SEMI_choice_meth_type_opt_SEMI_opt_DOTDOT of (
            anon_choice_meth_type_d8c4bdc
          * (Token.t (* ";" *) * anon_choice_meth_type_d8c4bdc)
              list (* zero or more *)
          * (Token.t (* ";" *) * Token.t (* ".." *) option) option
        )
      | `DOTDOT of Token.t (* ".." *)
    ]
      option
  * Token.t (* ">" *)
)

type or_binding_pattern (* inlined *) = (
    binding_pattern * Token.t (* "|" *) * binding_pattern
)

type or_pattern (* inlined *) = (pattern * Token.t (* "|" *) * pattern)

type packed_module (* inlined *) = (
    Token.t (* "(" *)
  * Token.t (* "val" *)
  * expression
  * module_typed option
  * (Token.t (* ":>" *) * module_type) option
  * Token.t (* ")" *)
)

type parenthesized_binding_pattern (* inlined *) = (
    Token.t (* "(" *) * binding_pattern * Token.t (* ")" *)
)

type parenthesized_class_expression (* inlined *) = (
    Token.t (* "(" *) * class_expression * Token.t (* ")" *)
)

type parenthesized_module_expression (* inlined *) = (
    Token.t (* "(" *) * module_expression * Token.t (* ")" *)
)

type parenthesized_module_type (* inlined *) = (
    Token.t (* "(" *) * module_type * Token.t (* ")" *)
)

type parenthesized_pattern (* inlined *) = (
    Token.t (* "(" *) * pattern * Token.t (* ")" *)
)

type polymorphic_type_ (* inlined *) = (
    [
        `Rep1_type_var of type_variable list (* one or more *)
      | `Abst_type of abstract_type
    ]
  * Token.t (* "." *)
  * type_
)

type prefix_expression (* inlined *) = (
    prefix_operator (*tok*) * simple_expression
)

type product_expression (* inlined *) = (
    expression * Token.t (* "," *) * expression
)

type quoted_item_extension (* inlined *) = (
    Token.t (* "{%%" *)
  * attribute_id
  * pat_3d340f6 option
  * quoted_string
  * Token.t (* "}" *)
  * item_attribute list (* zero or more *)
)

type sequence_expression_ (* inlined *) = (
    expression
  * Token.t (* ";" *)
  * (attribute option * sequence_expression) option
)

type set_expression (* inlined *) = (
    [
        `Field_get_exp of field_get_expression
      | `Array_get_exp of array_get_expression
      | `Str_get_exp of string_get_expression
      | `Biga_get_exp of bigarray_get_expression
      | `Inst_var_name of identifier (*tok*)
    ]
  * Token.t (* "<-" *)
  * expression
)

type sign_expression (* inlined *) = (sign_operator * expression)

type signature_ (* inlined *) = (
    Token.t (* "sig" *)
  * signature option
  * Token.t (* "end" *)
)

type structure_ (* inlined *) = (
    Token.t (* "struct" *)
  * structure option
  * Token.t (* "end" *)
)

type tag_binding_pattern (* inlined *) = (tag * binding_pattern)

type tag_pattern (* inlined *) = (tag * pattern)

type try_expression (* inlined *) = (
    Token.t (* "try" *)
  * attribute option
  * sequence_expression
  * Token.t (* "with" *)
  * match_cases
)

type tuple_binding_pattern (* inlined *) = (
    binding_pattern * Token.t (* "," *) * binding_pattern
)

type tuple_pattern (* inlined *) = (pattern * Token.t (* "," *) * pattern)

type tuple_type_ (* inlined *) = (
    tuple_type * Token.t (* "*" *) * simple_type
)

type typed_binding_pattern (* inlined *) = (
    Token.t (* "(" *) * binding_pattern * typed * Token.t (* ")" *)
)

type typed_class_expression (* inlined *) = (
    Token.t (* "(" *) * class_expression * class_typed * Token.t (* ")" *)
)

type typed_expression (* inlined *) = (
    Token.t (* "(" *) * sequence_expression * typed * Token.t (* ")" *)
)

type typed_module_expression (* inlined *) = (
    Token.t (* "(" *) * module_expression * module_typed * Token.t (* ")" *)
)

type typed_pattern (* inlined *) = (
    Token.t (* "(" *) * pattern * typed * Token.t (* ")" *)
)

type value_specification (* inlined *) = (
    Token.t (* "val" *)
  * attribute option
  * value_name
  * polymorphic_typed
  * item_attribute list (* zero or more *)
)

type while_expression (* inlined *) = (
    Token.t (* "while" *)
  * attribute option
  * sequence_expression
  * do_clause
)

type attribute_ (* inlined *) = (
    pat_6c51254
  * attribute_id
  * attribute_payload option
  * Token.t (* "]" *)
)
